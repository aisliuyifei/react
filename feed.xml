<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[React 中文文档]]></title><description><![CDATA[用于构建用户界面的 JavaScript 库]]></description><link>https://doc.react-china.org</link><generator>RSS for Node</generator><lastBuildDate>Wed, 24 Apr 2019 10:53:46 GMT</lastBuildDate><item><title><![CDATA[React v16.7: No, This Is Not the One With Hooks]]></title><description><![CDATA[<p>Our latest release includes an important performance bugfix for <code class="gatsby-code-text">React.lazy</code>. Although there are no API changes, we’re releasing it as a minor instead of a patch.</p>
<h2 id="why-is-this-bugfix-a-minor-instead-of-a-patch"><a href="#why-is-this-bugfix-a-minor-instead-of-a-patch" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why Is This Bugfix a Minor Instead of a Patch?</h2>
<p>React follows <a href="/docs/faq-versioning.html">semantic versioning</a>. Typically, this means that we use patch versions for bugfixes, and minors for new (non-breaking) features. However, we reserve the option to release minor versions even if they do not include new features. The motivation is to reserve patches for changes that have a very low chance of breaking. Patches are the most important type of release because they sometimes contain critical bugfixes. That means patch releases have a higher bar for reliability. It’s unacceptable for a patch to introduce additional bugs, because if people come to distrust patches, it compromises our ability to fix critical bugs when they arise — for example, to fix a security vulnerability.</p>
<p>We never intend to ship bugs. React has a hard-earned reputation for stability, and we intend to keep it that way. We thoroughly test every version of React before releasing. This includes unit tests, generative (fuzzy) tests, integration tests, and internal dogfooding across tens of thousands of components. However, sometimes we make mistakes. That’s why, going forward, our policy will be that if a release contains non-trivial changes, we will bump the minor version, even if the external behavior is the same. We’ll also bump the minor when changing <code class="gatsby-code-text">unstable_</code>-prefixed APIs.</p>
<h2 id="can-i-use-hooks-yet"><a href="#can-i-use-hooks-yet" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Can I Use Hooks Yet?</h2>
<p>Not yet, but soon!</p>
<p>At React Conf, we said that 16.7 would be the first release to include Hooks. This was a mistake. We shouldn’t have attached a specific version number to an unreleased feature. We’ll avoid this in the future.</p>
<p>Although 16.7 does not include Hooks, please do not infer anything about the timeline of the Hooks launch. Our plans for Hooks are unchanged:</p>
<ul>
<li>The <a href="https://github.com/reactjs/rfcs/pull/68">Hooks proposal</a> was accepted (<a href="https://github.com/reactjs/rfcs/pull/68#issuecomment-439314884">with minor planned changes in response to feedback</a>).</li>
<li>The <a href="https://github.com/facebook/react/commit/7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c">implementation</a> was merged into the React repo (behind a feature flag).</li>
<li>We’re currently in the testing phase, and you can expect a public release within a few months.</li>
</ul>
<p>We’ve heard from many people who want to start using Hooks in their apps. We also can’t wait to ship them! But because Hooks changes how we write React components, we are taking extra time to get the details right. We appreciate your patience as we prepare this exciting new feature for widespread, ahem, <em>use</em>.</p>
<p>Learn more about <a href="/blog/2018/11/27/react-16-roadmap.html">our roadmap</a> in our previous post.</p>
<h2 id="installation"><a href="#installation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>React v16.7.0 is available on the npm registry.</p>
<p>To install React 16 with Yarn, run:</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-bash"><code class="gatsby-code-bash">yarn add react@^16.7.0 react-dom@^16.7.0
</code></pre>
      </div>
<p>To install React 16 with npm, run:</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-bash"><code class="gatsby-code-bash"><span class="token function">npm</span> <span class="token function">install</span> --save react@^16.7.0 react-dom@^16.7.0
</code></pre>
      </div>
<p>We also provide UMD builds of React via a CDN:</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react@16/umd/react.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@16/umd/react-dom.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
      </div>
<p>Refer to the documentation for <a href="/docs/installation.html">detailed installation instructions</a>.</p>
<h2 id="changelog"><a href="#changelog" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Changelog</h2>
<h3 id="react-dom"><a href="#react-dom" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React DOM</h3>
<ul>
<li>Fix performance of <code class="gatsby-code-text">React.lazy</code> for large numbers of lazily-loaded components. (<a href="http://github.com/acdlite">@acdlite</a> in <a href="https://github.com/facebook/react/pull/14429">#14429</a>)</li>
<li>Clear fields on unmount to avoid memory leaks. (<a href="http://github.com/trueadm">@trueadm</a> in <a href="https://github.com/facebook/react/pull/14276">#14276</a>)</li>
<li>Fix bug with SSR and context when mixing <code class="gatsby-code-text">react-dom/server@16.6</code> and <code class="gatsby-code-text">react@&lt;16.6</code>. (<a href="http://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/14291">#14291</a>)</li>
<li>Fix a performance regression in profiling mode. (<a href="http://github.com/bvaughn">@bvaughn</a> in <a href="https://github.com/facebook/react/pull/14383">#14383</a>)</li>
</ul>
<h3 id="scheduler-experimental"><a href="#scheduler-experimental" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scheduler (Experimental)</h3>
<ul>
<li>Post to MessageChannel instead of window. (<a href="http://github.com/acdlite">@acdlite</a> in <a href="https://github.com/facebook/react/pull/14234">#14234</a>)</li>
<li>Reduce serialization overhead. (<a href="http://github.com/developit">@developit</a> in <a href="https://github.com/facebook/react/pull/14249">#14249</a>)</li>
<li>Fix fallback to <code class="gatsby-code-text">setTimeout</code> in testing environments. (<a href="http://github.com/bvaughn">@bvaughn</a> in <a href="https://github.com/facebook/react/pull/14358">#14358</a>)</li>
<li>Add methods for debugging. (<a href="http://github.com/mrkev">@mrkev</a> in <a href="https://github.com/facebook/react/pull/14053">#14053</a>)</li>
</ul>]]></description><link>https://doc.react-china.org/blog/2018/12/19/react-v-16-7.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/12/19/react-v-16-7.html</guid><pubDate>Wed, 19 Dec 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[React 16.x Roadmap]]></title><description><![CDATA[<p>You might have heard about features like “Hooks”, “Suspense”, and “Concurrent Rendering” in the previous blog posts and talks. In this post, we’ll look at how they fit together and the expected timeline for their availability in a stable release of React.</p>
<h2 id="tldr"><a href="#tldr" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>tl;dr</h2>
<p>We plan to split the rollout of new React features into the following milestones:</p>
<ul>
<li>React 16.6 with <a href="#react-166-shipped-the-one-with-suspense-for-code-splitting">Suspense for Code Splitting</a> (<em>already shipped</em>)</li>
<li>A minor 16.x release with <a href="#react-16x-q1-2019-the-one-with-hooks">React Hooks</a> (~Q1 2019)</li>
<li>A minor 16.x release with <a href="#react-16x-q2-2019-the-one-with-concurrent-mode">Concurrent Mode</a> (~Q2 2019)</li>
<li>A minor 16.x release with <a href="#react-16x-mid-2019-the-one-with-suspense-for-data-fetching">Suspense for Data Fetching</a> (~mid 2019)</li>
</ul>
<p><em>(The original version of this post used exact version numbers. We edited it to reflect that there might need to be a few other minor releases in the middle between these ones.)</em></p>
<p>These are estimates, and the details may change as we’re further along. There’s at least two more projects we plan to complete in 2019. They require more exploration and aren’t tied to a particular release yet:</p>
<ul>
<li><a href="#modernizing-react-dom">Modernizing React DOM</a></li>
<li><a href="#suspense-for-server-rendering">Suspense for Server Rendering</a></li>
</ul>
<p>We expect to get more clarity on their timeline in the coming months.</p>
<blockquote>
<p>Note</p>
<p>This post is just a roadmap — there is nothing in it that requires your immediate attention. When each of these features are released, we’ll publish a full blog post announcing them.</p>
</blockquote>
<h2 id="release-timeline"><a href="#release-timeline" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Release Timeline</h2>
<p>We have a single vision for how all of these features fit together, but we’re releasing each part as soon as it is ready so that you can test and start using them sooner. The API design doesn’t always make sense when looking at one piece in isolation; this post lays out the major parts of our plan to help you see the whole picture. (See our <a href="/docs/faq-versioning.html">versioning policy</a> to learn more about our commitment to stability.)</p>
<p>The gradual release strategy helps us refine the APIs, but the transitional period when some things aren’t ready can be confusing. Let’s look at what these different features mean for your app, how they relate to each other, and when you can expect to start learning and using them.</p>
<h3 id="react-166-shipped-the-one-with-suspense-for-code-splitting"><a href="#react-166-shipped-the-one-with-suspense-for-code-splitting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="/blog/2018/10/23/react-v-16-6.html">React 16.6</a> (shipped): The One with Suspense for Code Splitting</h3>
<p><em>Suspense</em> refers to React’s new ability to “suspend” rendering while components are waiting for something, and display a loading indicator. In React 16.6, Suspense supports only one use case: lazy loading components with <code class="gatsby-code-text">React.lazy()</code> and <code class="gatsby-code-text">&lt;React.Suspense&gt;</code>.</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">// This component is loaded dynamically</span>
<span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./OtherComponent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>React.Suspense</span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spinner</span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OtherComponent</span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>React.Suspense</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>Code splitting with <code class="gatsby-code-text">React.lazy()</code> with <code class="gatsby-code-text">&lt;React.Suspense&gt;</code> is documented <a href="/docs/code-splitting.html#reactlazy">in the Code Splitting guide</a>. You can find another practical explanation in <a href="https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d">this article</a>.</p>
<p>We have been using Suspense for code splitting at Facebook since July, and expect it to be stable. There’s been a few regressions in the initial public release in 16.6.0, but they were fixed in 16.6.3.</p>
<p>Code splitting is just the first step for Suspense. Our longer term vision for Suspense involves letting it handle data fetching too (and integrate with libraries like Apollo). In addition to a convenient programming model, Suspense also provides better user experience in Concurrent Mode. You’ll find information about these topics further below.</p>
<p><strong>Status in React DOM:</strong> Available since React 16.6.0.</p>
<p><strong>Status in React DOM Server:</strong> Suspense is not available in the server renderer yet. This isn’t for the lack of attention. We’ve started work on a new asynchronous server renderer that will support Suspense, but it’s a large project and will take a good chunk of 2019 to complete.</p>
<p><strong>Status in React Native:</strong> Bundle splitting isn’t very useful in React Native, but there’s nothing technically preventing <code class="gatsby-code-text">React.lazy()</code> and <code class="gatsby-code-text">&lt;Suspense&gt;</code> from working when given a Promise to a module.</p>
<p><strong>Recommendation:</strong> If you only do client rendering, we recommend widely adopting <code class="gatsby-code-text">React.lazy()</code> and <code class="gatsby-code-text">&lt;React.Suspense&gt;</code> for code splitting React components. If you do server rendering, you’ll have to wait with adoption until the new server renderer is ready.</p>
<h3 id="react-16x-q1-2019-the-one-with-hooks"><a href="#react-16x-q1-2019-the-one-with-hooks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React 16.x (~Q1 2019): The One with Hooks</h3>
<p><em>Hooks</em> let you use features like state and lifecycle from function components. They also let you reuse stateful logic between components without introducing extra nesting in your tree.</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Declare a new state variable, which we'll call "count"</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
       Click me
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
 <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>Hooks <a href="/docs/hooks-intro.html">introduction</a> and <a href="/docs/hooks-overview.html">overview</a> are good places to start. Watch <a href="https://www.youtube.com/watch?v=V-QO-KO90iQ">these talks</a> for a video introduction and a deep dive. The <a href="/docs/hooks-faq.html">FAQ</a> should answer most of your further questions. To learn more about the motivation behind Hooks, you can read <a href="https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889">this article</a>. Some of the rationale for the API design of Hooks is explained in <a href="https://github.com/reactjs/rfcs/pull/68#issuecomment-439314884">this RFC thread reply</a>.</p>
<p>We have been dogfooding Hooks at Facebook since September. We don’t expect major bugs in the implementation. Hooks are only available in the 16.7 alpha versions of React. Some of their API is expected to change in the final version (see the end of <a href="https://github.com/reactjs/rfcs/pull/68#issuecomment-439314884">this comment</a> for details). It is possible that the minor release with Hooks might not be React 16.7.</p>
<p>Hooks represent our vision for the future of React. They solve both problems that React users experience directly (“wrapper hell” of render props and higher-order components, duplication of logic in lifecycle methods), and the issues we’ve encountered optimizing React at scale (such as difficulties in inlining components with a compiler). Hooks don’t deprecate classes. However, if Hooks are successful, it is possible that in a future <em>major</em> release class support might move to a separate package, reducing the default bundle size of React.</p>
<p><strong>Status in React DOM:</strong> The first version of <code class="gatsby-code-text">react</code> and <code class="gatsby-code-text">react-dom</code> supporting Hooks is <code class="gatsby-code-text">16.7.0-alpha.0</code>. We expect to publish more alphas over the next months (at the time of writing, the latest one is <code class="gatsby-code-text">16.7.0-alpha.2</code>). You can try them by installing <code class="gatsby-code-text">react@next</code> with <code class="gatsby-code-text">react-dom@next</code>. Don’t forget to update <code class="gatsby-code-text">react-dom</code> — otherwise Hooks won’t work.</p>
<p><strong>Status in React DOM Server:</strong> The same 16.7 alpha versions of <code class="gatsby-code-text">react-dom</code> fully support Hooks with <code class="gatsby-code-text">react-dom/server</code>.</p>
<p><strong>Status in React Native:</strong> There is no officially supported way to try Hooks in React Native yet. If you’re feeling adventurous, check out <a href="https://github.com/facebook/react-native/issues/21967">this thread</a> for unofficial instructions. There is a known issue with <code class="gatsby-code-text">useEffect</code> firing too late which still needs to be solved.</p>
<p><strong>Recommendation:</strong> When you’re ready, we encourage you to start trying Hooks in new components you write. Make sure everyone on your team is on board with using them and familiar with this documentation. We don’t recommend rewriting your existing classes to Hooks unless you planned to rewrite them anyway (e.g. to fix bugs). Read more about the adoption strategy <a href="/docs/hooks-faq.html#adoption-strategy">here</a>.</p>
<h3 id="react-16x-q2-2019-the-one-with-concurrent-mode"><a href="#react-16x-q2-2019-the-one-with-concurrent-mode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React 16.x (~Q2 2019): The One with Concurrent Mode</h3>
<p><em>Concurrent Mode</em> lets React apps be more responsive by rendering component trees without blocking the main thread. It is opt-in and allows React to interrupt a long-running render (for example, rendering a new feed story) to handle a high-priority event (for example, text input or hover). Concurrent Mode also improves the user experience of Suspense by skipping unnecessary loading states on fast connections.</p>
<blockquote>
<p>Note</p>
<p>You might have previously heard Concurrent Mode being referred to as <a href="/blog/2018/03/27/update-on-async-rendering.html">“async mode”</a>. We’ve changed the name to Concurrent Mode to highlight React’s ability to perform work on different priority levels. This sets it apart from other approaches to async rendering.</p>
</blockquote>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">// Two ways to opt in:</span>

<span class="token comment">// 1. Part of an app (not final API)</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>React.unstable_ConcurrentMode</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Something</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>React.unstable_ConcurrentMode</span><span class="token punctuation">></span></span>

<span class="token comment">// 2. Whole app (not final API)</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">unstable_createRoot</span><span class="token punctuation">(</span>domNode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
      </div>
<p>There is no documentation written for the Concurrent Mode yet. It is important to highlight that the conceptual model will likely be unfamiliar at first. Documenting its benefits, how to use it efficiently, and its pitfalls is a high priority for us, and will be a prerequisite for calling it stable. Until then, <a href="https://www.youtube.com/watch?v=ByBPyMBTzM0">Andrew’s talk</a> is the best introduction available.</p>
<p>Concurrent Mode is <em>much</em> less polished than Hooks. Some APIs aren’t properly “wired up” yet and don’t do what they’re expected to. At the time of writing this post, we don’t recommend using it for anything except very early experimentation. We don’t expect many bugs in Concurrent Mode itself, but note that components that produce warnings in <a href="https://reactjs.org/docs/strict-mode.html"><code class="gatsby-code-text">&lt;React.StrictMode&gt;</code></a> may not work correctly. On a separate note, we’ve seen that Concurrent Mode <em>surfaces</em> performance problems in other code which can sometimes be mistaken for performance issues in Concurrent Mode itself. For example, a stray <code class="gatsby-code-text">setInterval(fn, 1)</code> call that runs every millisecond would have a worse effect in Concurrent Mode. We plan to publish more guidance about diagnosing and fixing issues like this as part of this release’s documentation.</p>
<p>Concurrent Mode is a big part of our vision for React. For CPU-bound work, it allows non-blocking rendering and keeps your app responsive while rendering complex component trees. That’s demoed in the first part of <a href="/blog/2018/03/01/sneak-peek-beyond-react-16.html">our JSConf Iceland talk</a>. Concurrent Mode also makes Suspense better. It lets you avoid flickering a loading indicator if the network is fast enough. It’s hard to explain without seeing so <a href="https://www.youtube.com/watch?v=ByBPyMBTzM0">Andrew’s talk</a> is the best resource available today. Concurrent Mode relies on a cooperative main thread <a href="https://github.com/facebook/react/tree/master/packages/scheduler">scheduler</a>, and we are <a href="https://www.youtube.com/watch?v=mDdgfyRB5kg">collaborating with the Chrome team</a> to eventually move this functionality into the browser itself.</p>
<p><strong>Status in React DOM:</strong> A <em>very</em> unstable version of Concurrent Mode is available behind an <code class="gatsby-code-text">unstable_</code> prefix in React 16.6 but we don’t recommend trying it unless you’re willing to often run into walls or missing features. The 16.7 alphas include <code class="gatsby-code-text">React.ConcurrentMode</code> and <code class="gatsby-code-text">ReactDOM.createRoot</code> without an <code class="gatsby-code-text">unstable_</code> prefix, but we’ll likely keep the prefix in 16.7, and only document and mark Concurrent Mode as stable in this future minor release.</p>
<p><strong>Status in React DOM Server:</strong> Concurrent Mode doesn’t directly affect server rendering. It will work with the existing server renderer.</p>
<p><strong>Status in React Native:</strong> The current plan is to delay enabling Concurrent Mode in React Native until <a href="https://github.com/react-native-community/discussions-and-proposals/issues/4">React Fabric</a> project is near completion.</p>
<p><strong>Recommendation:</strong> If you wish to adopt Concurrent Mode in the future, wrapping some component subtrees in <a href="https://reactjs.org/docs/strict-mode.html"><code class="gatsby-code-text">&lt;React.StrictMode&gt;</code></a> and fixing the resulting warnings is a good first step. In general it’s not expected that legacy code would immediately be compatible. For example, at Facebook we mostly intend to use the Concurrent Mode in the more recently developed codebases, and keep the legacy ones running in the synchronous mode for the near future.</p>
<h3 id="react-16x-mid-2019-the-one-with-suspense-for-data-fetching"><a href="#react-16x-mid-2019-the-one-with-suspense-for-data-fetching" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React 16.x (~mid 2019): The One with Suspense for Data Fetching</h3>
<p>As mentioned earlier, <em>Suspense</em> refers to React’s ability to “suspend” rendering while components are waiting for something, and display a loading indicator. In the already shipped React 16.6, the only supported use case for Suspense is code splitting. In this future minor release, we’d like to provide officially supported ways to use it for data fetching too. We’ll provide a reference implementation of a basic “React Cache” that’s compatible with Suspense, but you can also write your own. Data fetching libraries like Apollo and Relay will be able to integrate with Suspense by following a simple specification that we’ll document.</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">// React Cache for simple data fetching (not final API)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>unstable_createResource<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-cache'</span><span class="token punctuation">;</span>

<span class="token comment">// Tell React Cache how to fetch your data</span>
<span class="token keyword">const</span> TodoResource <span class="token operator">=</span> <span class="token function">unstable_createResource</span><span class="token punctuation">(</span>fetchTodo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Todo</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Suspends until the data is in the cache</span>
  <span class="token keyword">const</span> todo <span class="token operator">=</span> TodoResource<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// Same Suspense component you already use for code splitting</span>
    <span class="token comment">// would be able to handle data fetching too.</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>React.Suspense</span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spinner</span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token punctuation">{</span><span class="token comment">/* Siblings fetch in parallel */</span><span class="token punctuation">}</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Todo</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Todo</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>React.Suspense</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Other libraries like Apollo and Relay can also</span>
<span class="token comment">// provide Suspense integrations with similar APIs.</span>
</code></pre>
      </div>
<p>There is no official documentation for how to fetch data with Suspense yet, but you can find some early information in <a href="https://youtu.be/ByBPyMBTzM0?t=1312">this talk</a> and <a href="https://github.com/facebook/react/tree/master/fixtures/unstable-async/suspense">this small demo</a>. We’ll write documentation for React Cache (and how to write your own Suspense-compatible library) closer to this React release, but if you’re curious, you can find its very early source code <a href="https://github.com/facebook/react/blob/master/packages/react-cache/src/ReactCache.js">here</a>.</p>
<p>The low-level Suspense mechanism (suspending rendering and showing a fallback) is expected to be stable even in React 16.6. We’ve used it for code splitting in production for months. However, the higher-level APIs for data fetching are very unstable. React Cache is rapidly changing, and will change at least a few more times. There are some low-level APIs that are <a href="https://github.com/reactjs/rfcs/pull/89">missing</a> for a good higher-level API to be possible. We don’t recommend using React Cache anywhere except very early experiments. Note that React Cache itself isn’t strictly tied to React releases, but the current alphas lack basic features as cache invalidation, and you’ll run into a wall very soon. We expect to have something usable with this React release.</p>
<p>Eventually we’d like most data fetching to happen through Suspense but it will take a long time until all integrations are ready. In practice we expect it to be adopted very incrementally, and often through layers like Apollo or Relay rather than directly. Missing higher level APIs aren’t the only obstacle — there are also some important UI patterns we don’t support yet such as <a href="https://github.com/facebook/react/issues/14248">showing progress indicator outside of the loading view hierarchy</a>. As always, we will communicate our progress in the release notes on this blog.</p>
<p><strong>Status in React DOM and React Native:</strong> Technically, a compatible cache would already work with <code class="gatsby-code-text">&lt;React.Suspense&gt;</code> in React 16.6. However, we don’t expect to have a good cache implementation until this React minor release. If you’re feeling adventurous, you can try to write your own cache by looking at the React Cache alphas. However, note that the mental model is sufficiently different that there’s a high risk of misunderstanding it until the docs are ready.</p>
<p><strong>Status in React DOM Server:</strong> Suspense is not available in the server renderer yet. As we mentioned earlier, we’ve started work on a new asynchronous server renderer that will support Suspense, but it’s a large project and will take a good chunk of 2019 to complete.</p>
<p><strong>Recommendation:</strong> Wait for this minor React release in order to use Suspense for data fetching. Don’t try to use Suspense features in 16.6 for it; it’s not supported. However, your existing <code class="gatsby-code-text">&lt;Suspense&gt;</code> components for code splitting will be able to show loading states for data too when Suspense for Data Fetching becomes officially supported.</p>
<h2 id="other-projects"><a href="#other-projects" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Other Projects</h2>
<h3 id="modernizing-react-dom"><a href="#modernizing-react-dom" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Modernizing React DOM</h3>
<p>We started an investigation into <a href="https://github.com/facebook/react/issues/13525">simplifying and modernizing</a> ReactDOM, with a goal of reduced bundle size and aligning closer with the browser behavior. It is still early to say which specific bullet points will “make it” because the project is in an exploratory phase. We will communicate our progress on that issue.</p>
<h3 id="suspense-for-server-rendering"><a href="#suspense-for-server-rendering" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Suspense for Server Rendering</h3>
<p>We started designing a new server renderer that supports Suspense (including waiting for asynchronous data on the server without double rendering) and progressively loading and hydrating page content in chunks for best user experience. You can watch an overview of its early prototype in <a href="https://www.youtube.com/watch?v=z-6JC0_cOns">this talk</a>. The new server renderer is going to be our major focus in 2019, but it’s too early to say anything about its release schedule. Its development, as always, <a href="https://github.com/facebook/react/pulls?utf8=%E2%9C%93&#x26;q=is%3Apr+is%3Aopen+fizz">will happen on GitHub</a>.</p>
<hr>
<p>And that’s about it! As you can see, there’s a lot here to keep us busy but we expect much progress in the coming months.</p>
<p>We hope this post gives you an idea of what we’re working on, what you can use today, and what you can expect to use in the future. While there’s a lot of discussion about new features on social media platforms, you won’t miss anything important if you read this blog.</p>
<p>We’re always open to feedback, and love to hear from you in the <a href="https://github.com/reactjs/rfcs">RFC repository</a>, <a href="https://github.com/facebook/react/issues">the issue tracker</a>, and <a href="https://mobile.twitter.com/reactjs">on Twitter</a>.</p>]]></description><link>https://doc.react-china.org/blog/2018/11/27/react-16-roadmap.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/11/27/react-16-roadmap.html</guid><pubDate>Tue, 27 Nov 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[React Conf recap: Hooks, Suspense, and Concurrent Rendering]]></title><description><![CDATA[<p>This year’s <a href="https://conf.reactjs.org/">React Conf</a> took place on October 25 and 26 in Henderson, Nevada, where more than 600 attendees gathered to discuss the latest in UI engineering.</p>
<br>
<div>
          <div
            class="gatsby-resp-iframe-wrapper"
            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;"
          >
            <iframe src="https://www.youtube.com/embed/V-QO-KO90iQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen style="
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          "></iframe>
          </div>
          </div>
<p>Sophie Alpert and Dan Abramov kicked off Day 1 with their keynote, React Today and Tomorrow. In the talk, they introduced <a href="/docs/hooks-intro.html">Hooks</a>, which are a new proposal that adds the ability to access features such as state without writing a JavaScript class. Hooks promise to dramatically simplify the code required for React components and are currently available in a React alpha release.</p>
<br>
<div>
          <div
            class="gatsby-resp-iframe-wrapper"
            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;"
          >
            <iframe src="https://www.youtube.com/embed/ByBPyMBTzM0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen style="
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          "></iframe>
          </div>
          </div>
<p>On the morning of Day 2, Andrew Clark and Brian Vaughn presented Concurrent Rendering in React. Andrew covered the recently announced <a href="/blog/2018/10/23/react-v-16-6.html">React.lazy API for code splitting</a> and previewed two upcoming features: concurrent mode and Suspense. Brian demonstrated how to use <a href="/blog/2018/09/10/introducing-the-react-profiler.html">React’s new profiler</a> tooling to make apps built in React run faster.</p>
<br>
<div>
          <div
            class="gatsby-resp-iframe-wrapper"
            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;"
          >
            <iframe src="https://www.youtube.com/embed/UcqRXTriUVI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen style="
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          "></iframe>
          </div>
          </div>
<p>In the afternoon, Parashuram N spoke in detail about React Native’s New Architecture, a long-term project that the React Native team has been working on over the past year and <a href="https://facebook.github.io/react-native/blog/2018/06/14/state-of-react-native-2018">announced in June</a>. We’re really excited about the potential of this project to improve performance, simplify interoperability with other libraries, and set a strong foundation for the future of React Native.</p>
<p>Now that the conference is over, all 28 conference talks are <a href="https://www.youtube.com/playlist?list=PLPxbbTqCLbGE5AihOSExAa4wUM-P42EIJ">available to stream online</a>. There are tons of great ones from both days. We can’t wait until next year!</p>]]></description><link>https://doc.react-china.org/blog/2018/11/13/react-conf-recap.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/11/13/react-conf-recap.html</guid><pubDate>Tue, 13 Nov 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[React v16.6.0: lazy, memo and contextType]]></title><description><![CDATA[<p>Today we’re releasing React 16.6 with a few new convenient features. A form of PureComponent/shouldComponentUpdate for function components, a way to do code splitting using Suspense and an easier way to consume Context from class components.</p>
<p>Check out the full <a href="#changelog">changelog</a> below.</p>
<h2 id="reactmemo"><a href="#reactmemo" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="/docs/react-api.html#reactmemo"><code class="gatsby-code-text">React.memo</code></a></h2>
<p>Class components can bail out from rendering when their input props are the same using <a href="/docs/react-api.html#reactpurecomponent"><code class="gatsby-code-text">PureComponent</code></a> or <a href="/docs/react-component.html#shouldcomponentupdate"><code class="gatsby-code-text">shouldComponentUpdate</code></a>. Now you can do the same with function components by wrapping them in <a href="/docs/react-api.html#reactmemo"><code class="gatsby-code-text">React.memo</code></a>.</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* only rerenders if props change */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
      </div>
<h2 id="reactlazy-code-splitting-with-suspense"><a href="#reactlazy-code-splitting-with-suspense" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="/docs/code-splitting.html#reactlazy"><code class="gatsby-code-text">React.lazy</code></a>: Code-Splitting with <code class="gatsby-code-text">Suspense</code></h2>
<p>You may have seen <a href="/blog/2018/03/01/sneak-peek-beyond-react-16.html">Dan’s talk about React Suspense at JSConf Iceland</a>. Now you can use the Suspense component to do <a href="/docs/code-splitting.html#reactlazy">code-splitting</a> by wrapping a dynamic import in a call to <code class="gatsby-code-text">React.lazy()</code>.</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>lazy<span class="token punctuation">,</span> Suspense<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./OtherComponent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Loading<span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OtherComponent</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>The Suspense component will also allow library authors to start building data fetching with Suspense support in the future.</p>
<blockquote>
<p>Note: This feature is not yet available for server-side rendering. Suspense support will be added in a later release.</p>
</blockquote>
<h2 id="static-contexttype"><a href="#static-contexttype" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="/docs/context.html#classcontexttype"><code class="gatsby-code-text">static contextType</code></a></h2>
<p>In <a href="/blog/2018/03/29/react-v-16-3.html">React 16.3</a> we introduced the official Context API as a replacement to the previous <a href="/docs/legacy-context.html">Legacy Context</a> API.</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
      </div>
<p>We’ve heard feedback that adopting the new render prop API can be difficult in class components. So we’ve add a convenience API to <a href="/docs/context.html#classcontexttype">consume a context value from within a class component</a>.</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> contextType <span class="token operator">=</span> MyContext<span class="token punctuation">;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>
    <span class="token comment">/* perform a side-effect at mount using the value of MyContext */</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>
    <span class="token comment">/* ... */</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>
    <span class="token comment">/* ... */</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>
    <span class="token comment">/* render something based on the value of MyContext */</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<h2 id="static-getderivedstatefromerror"><a href="#static-getderivedstatefromerror" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="/docs/react-component.html#static-getderivedstatefromerror"><code class="gatsby-code-text">static getDerivedStateFromError()</code></a></h2>
<p>React 16 introduced <a href="/blog/2017/07/26/error-handling-in-react-16.html">Error Boundaries</a> for handling errors thrown in React renders. We already had the <code class="gatsby-code-text">componentDidCatch</code> lifecycle method which gets fired after an error has already happened. It’s great for logging errors to the server. It also lets you show a different UI to the user by calling <code class="gatsby-code-text">setState</code>.</p>
<p>Before that is fired, we render <code class="gatsby-code-text">null</code> in place of the tree that threw an error. This sometimes breaks parent components that don’t expect their refs to be empty. It also doesn’t work to recover from errors on the server since the <code class="gatsby-code-text">Did</code> lifecycle methods don’t fire during server-side rendering.</p>
<p>We’re adding another error method that lets you render the fallback UI before the render completes. See the docs for <a href="/docs/react-component.html#static-getderivedstatefromerror"><code class="gatsby-code-text">getDerivedStateFromError()</code></a>.</p>
<blockquote>
<p>Note: <code class="gatsby-code-text">getDerivedStateFromError()</code> is not yet available for server-side rendering. It is designed to work with server-side rendering in a future release. We’re releasing it early so that you can start preparing to use it.</p>
</blockquote>
<h2 id="deprecations-in-strictmode"><a href="#deprecations-in-strictmode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deprecations in StrictMode</h2>
<p>In <a href="/blog/2018/03/29/react-v-16-3.html#strictmode-component">16.3</a> we introduced the <a href="/docs/strict-mode.html"><code class="gatsby-code-text">StrictMode</code></a> component. It lets you opt-in to early warnings for patterns that might cause problems in the future.</p>
<p>We’ve added two more APIs to the list of deprecated APIs in <code class="gatsby-code-text">StrictMode</code>. If you don’t use <code class="gatsby-code-text">StrictMode</code> you don’t have to worry; these warning won’t fire for you.</p>
<ul>
<li><strong>ReactDOM.findDOMNode()</strong> - This API is often misunderstood and most uses of it are unnecessary. It can also be surprisingly slow in React 16. <a href="/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage">See the docs</a> for possible upgrade paths.</li>
<li><strong>Legacy Context</strong> using contextTypes and getChildContext - Legacy context makes React slightly slower and bigger than it needs to be. That’s why we strongly want to encourage upgrading to the <a href="/docs/context.html">new context API</a>. Hopefully the addition of the <a href="/docs/context.html#classcontexttype"><code class="gatsby-code-text">contextType</code></a> API makes this a bit easier.</li>
</ul>
<p>If you’re having trouble upgrading, we’d like to hear your feedback.</p>
<h2 id="installation"><a href="#installation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>React v16.6.0 is available on the npm registry.</p>
<p>To install React 16 with Yarn, run:</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-bash"><code class="gatsby-code-bash">yarn add react@^16.6.0 react-dom@^16.6.0
</code></pre>
      </div>
<p>To install React 16 with npm, run:</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-bash"><code class="gatsby-code-bash"><span class="token function">npm</span> <span class="token function">install</span> --save react@^16.6.0 react-dom@^16.6.0
</code></pre>
      </div>
<p>We also provide UMD builds of React via a CDN:</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react@16/umd/react.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@16/umd/react-dom.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
      </div>
<p>Refer to the documentation for <a href="/docs/installation.html">detailed installation instructions</a>.</p>
<h2 id="changelog"><a href="#changelog" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Changelog</h2>
<h3 id="react"><a href="#react" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React</h3>
<ul>
<li>Add <code class="gatsby-code-text">React.memo()</code> as an alternative to <code class="gatsby-code-text">PureComponent</code> for functions. (<a href="https://github.com/acdlite">@acdlite</a> in <a href="https://github.com/facebook/react/pull/13748">#13748</a>)</li>
<li>Add <code class="gatsby-code-text">React.lazy()</code> for code splitting components. (<a href="https://github.com/acdlite">@acdlite</a> in <a href="https://github.com/facebook/react/pull/13885">#13885</a>)</li>
<li><code class="gatsby-code-text">React.StrictMode</code> now warns about legacy context API. (<a href="https://github.com/bvaughn">@bvaughn</a> in <a href="https://github.com/facebook/react/pull/13760">#13760</a>)</li>
<li><code class="gatsby-code-text">React.StrictMode</code> now warns about <code class="gatsby-code-text">findDOMNode</code>. (<a href="https://github.com/sebmarkbage">@sebmarkbage</a> in <a href="https://github.com/facebook/react/pull/13841">#13841</a>)</li>
<li>Rename <code class="gatsby-code-text">unstable_AsyncMode</code> to <code class="gatsby-code-text">unstable_ConcurrentMode</code>. (<a href="https://github.com/trueadm">@trueadm</a> in <a href="https://github.com/facebook/react/pull/13732">#13732</a>)</li>
<li>Rename <code class="gatsby-code-text">unstable_Placeholder</code> to <code class="gatsby-code-text">Suspense</code>, and <code class="gatsby-code-text">delayMs</code> to <code class="gatsby-code-text">maxDuration</code>. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/13799">#13799</a> and <a href="https://github.com/sebmarkbage">@sebmarkbage</a> in <a href="https://github.com/facebook/react/pull/13922">#13922</a>)</li>
</ul>
<h3 id="react-dom"><a href="#react-dom" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React DOM</h3>
<ul>
<li>Add <code class="gatsby-code-text">contextType</code> as a more ergonomic way to subscribe to context from a class. (<a href="https://github.com/bvaughn">@bvaughn</a> in <a href="https://github.com/facebook/react/pull/13728">#13728</a>)</li>
<li>Add <code class="gatsby-code-text">getDerivedStateFromError</code> lifecycle method for catching errors in a future asynchronous server-side renderer. (<a href="https://github.com/bvaughn">@bvaughn</a> in <a href="https://github.com/facebook/react/pull/13746">#13746</a>)</li>
<li>Warn when <code class="gatsby-code-text">&lt;Context&gt;</code> is used instead of <code class="gatsby-code-text">&lt;Context.Consumer&gt;</code>. (<a href="https://github.com/trueadm">@trueadm</a> in <a href="https://github.com/facebook/react/pull/13829">#13829</a>)</li>
<li>Fix gray overlay on iOS Safari. (<a href="https://github.com/philipp-spiess">@philipp-spiess</a> in <a href="https://github.com/facebook/react/pull/13778">#13778</a>)</li>
<li>Fix a bug caused by overwriting <code class="gatsby-code-text">window.event</code> in development. (<a href="https://github.com/sergei-startsev">@sergei-startsev</a> in <a href="https://github.com/facebook/react/pull/13697">#13697</a>)</li>
</ul>
<h3 id="react-dom-server"><a href="#react-dom-server" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React DOM Server</h3>
<ul>
<li>Add support for <code class="gatsby-code-text">React.memo()</code>. (<a href="https://github.com/alexmckenley">@alexmckenley</a> in <a href="https://github.com/facebook/react/pull/13855">#13855</a>)</li>
<li>Add support for <code class="gatsby-code-text">contextType</code>. (<a href="https://github.com/alexmckenley">@alexmckenley</a> and <a href="https://github.com/sebmarkbage">@sebmarkbage</a> in <a href="https://github.com/facebook/react/pull/13889">#13889</a>)</li>
</ul>
<h3 id="scheduler-experimental"><a href="#scheduler-experimental" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scheduler (Experimental)</h3>
<ul>
<li>Rename the package to <code class="gatsby-code-text">scheduler</code>. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/13683">#13683</a>)</li>
<li>Support priority levels, continuations, and wrapped callbacks. (<a href="https://github.com/acdlite">@acdlite</a> in <a href="https://github.com/facebook/react/pull/13720">#13720</a> and <a href="https://github.com/facebook/react/pull/13842">#13842</a>)</li>
<li>Improve the fallback mechanism in non-DOM environments. (<a href="https://github.com/acdlite">@acdlite</a> in <a href="https://github.com/facebook/react/pull/13740">#13740</a>)</li>
<li>Schedule <code class="gatsby-code-text">requestAnimationFrame</code> earlier. (<a href="https://github.com/acdlite">@acdlite</a> in <a href="https://github.com/facebook/react/pull/13785">#13785</a>)</li>
<li>Fix the DOM detection to be more thorough. (<a href="https://github.com/trueadm">@trueadm</a> in <a href="https://github.com/facebook/react/pull/13731">#13731</a>)</li>
<li>Fix bugs with interaction tracing. (<a href="https://github.com/bvaughn">@bvaughn</a> in <a href="https://github.com/facebook/react/pull/13590">#13590</a>)</li>
<li>Add the <code class="gatsby-code-text">envify</code> transform to the package. (<a href="https://github.com/mridgway">@mridgway</a> in <a href="https://github.com/facebook/react/pull/13766">#13766</a>)</li>
</ul>]]></description><link>https://doc.react-china.org/blog/2018/10/23/react-v-16-6.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/10/23/react-v-16-6.html</guid><pubDate>Tue, 23 Oct 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Create React App 2.0: Babel 7, Sass, and More]]></title><description><![CDATA[<p>Create React App 2.0 has been released today, and it brings a year’s worth of improvements in a single dependency update.</p>
<p>While React itself <a href="/docs/create-a-new-react-app.html">doesn’t require any build dependencies</a>, it can be challenging to write a complex app without a fast test runner, a production minifier, and a modular codebase. Since the very first release, the goal of <a href="https://github.com/facebook/create-react-app">Create React App</a> has been to help you focus on what matters the most — your application code — and to handle build and testing setup for you.</p>
<p>Many of the tools it relies on have since released new versions containing new features and performance improvements: <a href="https://babeljs.io/blog/2018/08/27/7.0.0">Babel 7</a>, <a href="https://medium.com/webpack/webpack-4-released-today-6cdb994702d4">webpack 4</a>, and <a href="https://jestjs.io/blog/2018/05/29/jest-23-blazing-fast-delightful-testing.html">Jest 23</a>. However, updating them manually and making them work well together takes a lot of effort. And this is exactly what <a href="https://github.com/facebook/create-react-app/graphs/contributors">Create React App 2.0 contributors</a> have been busy with for the past few months: <strong>migrating the configuration and dependencies so that you don’t need to do it yourself.</strong></p>
<p>Now that Create React App 2.0 is out of beta, let’s see what’s new and how you can try it!</p>
<blockquote>
<p>Note</p>
<p>Don’t feel pressured to upgrade anything. If you’re satisfied with the current feature set, its performance, and reliability, you can keep using the version you’re currently at! It might also be a good idea to let the 2.0 release stabilize a little bit before switching to it in production.</p>
</blockquote>
<h2 id="whats-new"><a href="#whats-new" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What’s New</h2>
<p>Here’s a short summary of what’s new in this release:</p>
<ul>
<li>🎉 More styling options: you can use <a href="https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-a-sass-stylesheet">Sass</a> and <a href="https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-a-css-modules-stylesheet">CSS Modules</a> out of the box.</li>
<li>🐠 We updated to <a href="https://babeljs.io/blog/2018/08/27/7.0.0">Babel 7</a>, including support for the <a href="/docs/fragments.html#short-syntax">React fragment syntax</a> and many bugfixes.</li>
<li>📦 We updated to <a href="https://medium.com/webpack/webpack-4-released-today-6cdb994702d4">webpack 4</a>, which automatically splits JS bundles more intelligently.</li>
<li>🃏 We updated to <a href="https://jestjs.io/blog/2018/05/29/jest-23-blazing-fast-delightful-testing.html">Jest 23</a>, which includes an <a href="https://jestjs.io/blog/2018/05/29/jest-23-blazing-fast-delightful-testing#interactive-snapshot-mode">interactive mode</a> for reviewing snapshots.</li>
<li>💄 We added <a href="https://preset-env.cssdb.org/features#stage-3">PostCSS</a> so you can use new CSS features in old browsers.</li>
<li>💎 You can use <a href="https://github.com/leoasis/graphql-tag.macro#usage">Apollo</a>, <a href="https://github.com/facebook/relay/pull/2171#issuecomment-411459604">Relay Modern</a>, <a href="https://github.com/facebook/create-react-app/issues/5149#issuecomment-425396995">MDX</a>, and other third-party <a href="https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros">Babel Macros</a> transforms.</li>
<li>🌠 You can now <a href="https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-svgs">import an SVG as a React component</a>, and use it in JSX.</li>
<li>🐈 You can try the experimental <a href="https://github.com/yarnpkg/rfcs/pull/101">Yarn Plug’n’Play mode</a> that removes <code class="gatsby-code-text">node_modules</code>.</li>
<li>🕸 You can now <a href="https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#configuring-the-proxy-manually">plug your own proxy implementation</a> in development to match your backend API.</li>
<li>🚀 You can now use <a href="https://github.com/sindresorhus/ama/issues/446#issuecomment-281014491">packages written for latest Node versions</a> without breaking the build.</li>
<li>✂️ You can now optionally get a smaller CSS bundle if you only plan to target modern browsers.</li>
<li>👷‍♀️ Service workers are now opt-in and are built using Google’s <a href="https://developers.google.com/web/tools/workbox/">Workbox</a>.</li>
</ul>
<p><strong>All of these features work out of the box</strong> — to enable them, follow the below instructions.</p>
<h2 id="starting-a-project-with-create-react-app-20"><a href="#starting-a-project-with-create-react-app-20" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Starting a Project with Create React App 2.0</h2>
<p>You don’t need to update anything special. Starting from today, when you run <code class="gatsby-code-text">create-react-app</code> it will use the 2.0 version of the template by default. Have fun!</p>
<p>If you want to <strong>use the old 1.x template</strong> for some reason, you can do that by passing <code class="gatsby-code-text">--scripts-version=react-scripts@1.x</code> as an argument to <code class="gatsby-code-text">create-react-app</code>.</p>
<h2 id="updating-a-project-to-create-react-app-20"><a href="#updating-a-project-to-create-react-app-20" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Updating a Project to Create React App 2.0</h2>
<p>Upgrading a non-ejected project to Create React App 2.0 should usually be straightforward. Open <code class="gatsby-code-text">package.json</code> in the root of your project and find <code class="gatsby-code-text">react-scripts</code> there.</p>
<p>Then change its version to <code class="gatsby-code-text">2.0.3</code>:</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">  <span class="token comment">// ... other dependencies ...</span>
<span class="gatsby-highlight-code-line">  <span class="token string">"react-scripts"</span><span class="token punctuation">:</span> <span class="token string">"2.0.3"</span>
</span></code></pre>
      </div>
<p>Run <code class="gatsby-code-text">npm install</code> (or <code class="gatsby-code-text">yarn</code>, if you use it). <strong>For many projects, this one-line change is sufficient to upgrade!</strong></p>
<blockquote class="twitter-tweet" data-conversation="none" data-dnt="true"><p lang="en" dir="ltr">working here... thanks for all the new functionality 👍</p>&mdash; Stephen Haney (@sdothaney) <a href="https://twitter.com/sdothaney/status/1046822703116607490?ref_src=twsrc%5Etfw">October 1, 2018</a></blockquote>
<p>Here are a few more tips to get you started.</p>
<p><strong>When you run <code class="gatsby-code-text">npm start</code> for the first time after the upgrade,</strong> you’ll get a prompt asking about which browsers you’d like to support. Press <code class="gatsby-code-text">y</code> to accept the default ones. They’ll be written to your <code class="gatsby-code-text">package.json</code> and you can edit them any time. Create React App will use this information to produce smaller or polyfilled CSS bundles depending on whether you target modern browsers or older browsers.</p>
<p><strong>If <code class="gatsby-code-text">npm start</code> still doesn’t quite work for you after the upgrade,</strong> <a href="https://github.com/facebook/create-react-app/releases/tag/v2.0.3">check out the more detailed migration instructions in the release notes</a>. There <em>are</em> a few breaking changes in this release but the scope of them is limited, so they shouldn’t take more than a few hours to sort out. Note that <strong><a href="https://github.com/facebook/create-react-app/blob/master/packages/react-app-polyfill/README.md">support for older browsers</a> is now opt-in</strong> to reduce the polyfill size.</p>
<p><strong>If you previously ejected but now want to upgrade,</strong> one common solution is to find the commits where you ejected (and any subsequent commits changing the configuration), revert them, upgrade, and later optionally eject again. It’s also possible that the feature you ejected for (maybe Sass or CSS Modules?) is now supported out of the box.</p>
<blockquote>
<p>Note</p>
<p>Due to a possible bug in npm, you might see warnings about unsatisfied peer dependencies. You should be able to ignore them. As far as we’re aware, this issue isn’t present with Yarn.</p>
</blockquote>
<h2 id="breaking-changes"><a href="#breaking-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Breaking Changes</h2>
<p>Here’s a short list of breaking changes in this release:</p>
<ul>
<li>Node 6 is no longer supported.</li>
<li>Support for older browsers (such as IE 9 to IE 11) is now opt-in with a <a href="https://github.com/facebook/create-react-app/tree/master/packages/react-app-polyfill">separate package</a>.</li>
<li>Code-splitting with <code class="gatsby-code-text">import()</code> now behaves closer to specification, while <code class="gatsby-code-text">require.ensure()</code> is disabled.</li>
<li>The default Jest environment now includes jsdom.</li>
<li>Support for specifying an object as <code class="gatsby-code-text">proxy</code> setting was replaced with support for a custom proxy module.</li>
<li>Support for <code class="gatsby-code-text">.mjs</code> extension was removed until the ecosystem around it stabilizes.</li>
<li>PropTypes definitions are automatically stripped out of the production builds.</li>
</ul>
<p>If either of these points affects you, <a href="https://github.com/facebook/create-react-app/releases/tag/v2.0.3">2.0.3 release notes</a> contain more detailed instructions.</p>
<h2 id="learn-more"><a href="#learn-more" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Learn More</h2>
<p>You can find the full changelog in the <a href="https://github.com/facebook/create-react-app/releases/tag/v2.0.3">release notes</a>. This was a large release, and we may have missed something. Please report any problems to our <a href="https://github.com/facebook/create-react-app/issues/new">issue tracker</a> and we’ll try to help.</p>
<blockquote>
<p>Note</p>
<p>If you’ve been using 2.x alpha versions, we provide <a href="https://gist.github.com/gaearon/8650d1c70e436e5eff01f396dffc4114">separate migration instructions</a> for them.</p>
</blockquote>
<h2 id="thanks"><a href="#thanks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Thanks</h2>
<p>This release wouldn’t be possible without our wonderful community of contributors. We’d like to thank <a href="https://github.com/andriijas">Andreas Cederström</a>, <a href="https://github.com/clemmy">Clement Hoang</a>, <a href="https://github.com/existentialism">Brian Ng</a>, <a href="https://github.com/kentcdodds">Kent C. Dodds</a>, <a href="https://github.com/viankakrisna">Ade Viankakrisna Fadlil</a>, <a href="https://github.com/ai">Andrey Sitnik</a>, <a href="https://github.com/ro-savage">Ro Savage</a>, <a href="https://github.com/Fabianopb">Fabiano Brito</a>, <a href="https://github.com/iansu">Ian Sutherland</a>, <a href="https://github.com/petetnt">Pete Nykänen</a>, <a href="https://github.com/jeffposnick">Jeffrey Posnick</a>, <a href="https://github.com/bugzpodder">Jack Zhao</a>, <a href="https://github.com/sokra">Tobias Koppers</a>, <a href="https://github.com/hzoo">Henry Zhu</a>, <a href="https://github.com/arcanis">Maël Nison</a>, <a href="https://github.com/lixiaoyan">XiaoYan Li</a>, <a href="https://github.com/themre">Marko Trebizan</a>, <a href="https://github.com/mareksuscak">Marek Suscak</a>, <a href="https://github.com/miraage">Mikhail Osher</a>, and many others who provided feedback and testing for this release.</p>]]></description><link>https://doc.react-china.org/blog/2018/10/01/create-react-app-v2.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/10/01/create-react-app-v2.html</guid><pubDate>Mon, 01 Oct 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introducing the React Profiler]]></title><description><![CDATA[<p>React 16.5 adds support for a new DevTools profiler plugin.
This plugin uses React’s <a href="https://github.com/reactjs/rfcs/pull/51">experimental Profiler API</a> to collect timing information about each component that’s rendered in order to identify performance bottlenecks in React applications.
It will be fully compatible with our upcoming <a href="/blog/2018/03/01/sneak-peek-beyond-react-16.html">time slicing and suspense</a> features.</p>
<p>This blog post covers the following topics:</p>
<ul>
<li><a href="#profiling-an-application">Profiling an application</a></li>
<li>
<p><a href="#reading-performance-data">Reading performance data</a></p>
<ul>
<li><a href="#browsing-commits">Browsing commits</a></li>
<li><a href="#filtering-commits">Filtering commits</a></li>
<li><a href="#flame-chart">Flame chart</a></li>
<li><a href="#ranked-chart">Ranked chart</a></li>
<li><a href="#component-chart">Component chart</a></li>
<li><a href="#interactions">Interactions</a></li>
</ul>
</li>
<li>
<p><a href="#troubleshooting">Troubleshooting</a></p>
<ul>
<li><a href="#no-profiling-data-has-been-recorded-for-the-selected-root">No profiling data has been recorded for the selected root</a></li>
<li><a href="#no-timing-data-to-display-for-the-selected-commit">No timing data to display for the selected commit</a></li>
</ul>
</li>
<li><a href="#deep-dive-video">Deep dive video</a></li>
</ul>
<h2 id="profiling-an-application"><a href="#profiling-an-application" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Profiling an application</h2>
<p>DevTools will show a “Profiler” tab for applications that support the new profiling API:</p>
<p><img src="../images/blog/introducing-the-react-profiler/devtools-profiler-tab.png" alt="New DevTools &#x22;profiler&#x22; tab"></p>
<blockquote>
<p>Note:</p>
<p><code class="gatsby-code-text">react-dom</code> 16.5+ supports profiling in DEV mode.
A production profiling bundle is also available as <code class="gatsby-code-text">react-dom/profiling</code>.
Read more about how to use this bundle at <a href="https://fb.me/react-profiling">fb.me/react-profiling</a> </p>
</blockquote>
<p>The “Profiler” panel will be empty initially. Click the record button to start profiling:</p>
<p><img src="../images/blog/introducing-the-react-profiler/start-profiling.png" alt="Click &#x22;record&#x22; to start profiling"></p>
<p>Once you’ve started recording, DevTools will automatically collect performance information each time your application renders.
Use your app as you normally would.
When you are finished profiling, click the “Stop” button.</p>
<p><img src="../images/blog/introducing-the-react-profiler/stop-profiling.png" alt="Click &#x22;stop&#x22; when you are finished profiling"></p>
<p>Assuming your application rendered at least once while profiling, DevTools will show several ways to view the performance data.
We’ll <a href="#reading-performance-data">take a look at each of these below</a>.</p>
<h2 id="reading-performance-data"><a href="#reading-performance-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reading performance data</h2>
<h3 id="browsing-commits"><a href="#browsing-commits" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Browsing commits</h3>
<p>Conceptually, React does work in two phases:</p>
<ul>
<li>The <strong>render</strong> phase determines what changes need to be made to e.g. the DOM. During this phase, React calls <code class="gatsby-code-text">render</code> and then compares the result to the previous render.</li>
<li>The <strong>commit</strong> phase is when React applies any changes. (In the case of React DOM, this is when React inserts, updates, and removes DOM nodes.) React also calls lifecycles like <code class="gatsby-code-text">componentDidMount</code> and <code class="gatsby-code-text">componentDidUpdate</code> during this phase.</li>
</ul>
<p>The DevTools profiler groups performance info by commit.
Commits are displayed in a bar chart near the top of the profiler:</p>
<p><img src="../images/blog/introducing-the-react-profiler/commit-selector.png" alt="Bar chart of profiled commits"></p>
<p>Each bar in the chart represents a single commit with the currently selected commit colored black.
You can click on a bar (or the left/right arrow buttons) to select a different commit.</p>
<p>The color and height of each bar corresponds to how long that commit took to render.
(Taller, yellow bars took longer than shorter, blue bars.)</p>
<h3 id="filtering-commits"><a href="#filtering-commits" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Filtering commits</h3>
<p>The longer you profile, the more times your application will render.
In some cases you may end up with <em>too many commits</em> to easily process.
The profiler offers a filtering mechanism to help with this.
Use it to specify a threshold and the profiler will hide all commits that were <em>faster</em> than that value.</p>
<p><img src="../images/blog/introducing-the-react-profiler/filtering-commits.gif" alt="Filtering commits by time"></p>
<h3 id="flame-chart"><a href="#flame-chart" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Flame chart</h3>
<p>The flame chart view represents the state of your application for a particular commit.
Each bar in the chart represents a React component (e.g. <code class="gatsby-code-text">App</code>, <code class="gatsby-code-text">Nav</code>).
The size and color of the bar represents how long it took to render the component and its children.
(The width of a bar represents how much time was spent <em>when the component last rendered</em> and the color represents how much time was spent <em>as part of the current commit</em>.)</p>
<p><img src="../images/blog/introducing-the-react-profiler/flame-chart.png" alt="Example flame chart"></p>
<blockquote>
<p>Note:</p>
<p>The width of a bar indicates how long it took to render the component (and its children) when they last rendered.
If the component did not re-render as part of this commit, the time represents a previous render.
The wider a component is, the longer it took to render.</p>
<p>The color of a bar indicates how long the component (and its children) took to render in the selected commit.
Yellow components took more time, blue components took less time, and gray components did not render at all during this commit.</p>
</blockquote>
<p>For example, the commit shown above took a total of 18.4ms to render.
The <code class="gatsby-code-text">Router</code> component was the “most expensive” to render (taking 18.4ms).
Most of this time was due to two of its children, <code class="gatsby-code-text">Nav</code> (8.4ms) and <code class="gatsby-code-text">Route</code> (7.9ms).
The rest of the time was divided between its remaining children or spent in the component’s own render method.</p>
<p>You can zoom in or out on a flame chart by clicking on components:
<img src="../images/blog/introducing-the-react-profiler/zoom-in-and-out.gif" alt="Click on a component to zoom in or out"></p>
<p>Clicking on a component will also select it and show information in the right side panel which includes its <code class="gatsby-code-text">props</code> and <code class="gatsby-code-text">state</code> at the time of this commit.
You can drill into these to learn more about what the component actually rendered during the commit:</p>
<p><img src="../images/blog/introducing-the-react-profiler/props-and-state.gif" alt="Viewing a component&#x27;s props and state for a commit"></p>
<p>In some cases, selecting a component and stepping between commits may also provide a hint as to <em>why</em> the component rendered:</p>
<p><img src="../images/blog/introducing-the-react-profiler/see-which-props-changed.gif" alt="Seeing which values changed between commits"></p>
<p>The above image shows that <code class="gatsby-code-text">state.scrollOffset</code> changed between commits.
This is likely what caused the <code class="gatsby-code-text">List</code> component to re-render.</p>
<h3 id="ranked-chart"><a href="#ranked-chart" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ranked chart</h3>
<p>The ranked chart view represents a single commit.
Each bar in the chart represents a React component (e.g. <code class="gatsby-code-text">App</code>, <code class="gatsby-code-text">Nav</code>).
The chart is ordered so that the components which took the longest to render are at the top.</p>
<p><img src="../images/blog/introducing-the-react-profiler/ranked-chart.png" alt="Example ranked chart"></p>
<blockquote>
<p>Note:</p>
<p>A component’s render time includes the time spent rendering its children,
so the components which took the longest to render are generally near the top of the tree.</p>
</blockquote>
<p>As with the flame chart, you can zoom in or out on a ranked chart by clicking on components.</p>
<h3 id="component-chart"><a href="#component-chart" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Component chart</h3>
<p>Sometimes it’s useful to see how many times a particular component rendered while you were profiling.
The component chart provides this information in the form of a bar chart.
Each bar in the chart represents a time when the component rendered.
The color and height of each bar corresponds to how long the component took to render <em>relative to other components</em> in a particular commit.</p>
<p><img src="../images/blog/introducing-the-react-profiler/component-chart.png" alt="Example component chart"></p>
<p>The chart above shows that the <code class="gatsby-code-text">List</code> component rendered 11 times.
It also shows that each time it rendered, it was the most “expensive” component in the commit (meaning that it took the longest).</p>
<p>To view this chart, either double-click on a component <em>or</em> select a component and click on the blue bar chart icon in the right detail pane.
You can return to the previous chart by clicking the “x” button in the right detail pane.
You can aso double click on a particular bar to view more information about that commit.</p>
<p><img src="../images/blog/introducing-the-react-profiler/see-all-commits-for-a-fiber.gif" alt="How to view all renders for a specific component"></p>
<p>If the selected component did not render at all during the profiling session, the following message will be shown:</p>
<p><img src="../images/blog/introducing-the-react-profiler/no-render-times-for-selected-component.png" alt="No render times for the selected component"></p>
<h3 id="interactions"><a href="#interactions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Interactions</h3>
<p>React recently added another <a href="https://fb.me/react-interaction-tracing">experimental API</a> for tracing the <em>cause</em> of an update.
“Interactions” traced with this API will also be shown in the profiler:</p>
<p><img src="../images/blog/introducing-the-react-profiler/interactions.png" alt="The interactions panel"></p>
<p>The image above shows a profiling session that traced four interactions.
Each row represents an interaction that was traced.
The colored dots along the row represent commits that were related to that interaction.</p>
<p>You can also see which interactions were traced for a particular commit from the flame chart and ranked chart views as well:</p>
<p><img src="../images/blog/introducing-the-react-profiler/interactions-for-commit.png" alt="List of interactions for a commit"></p>
<p>You can navigate between interactions and commits by clicking on them:</p>
<p><img src="../images/blog/introducing-the-react-profiler/navigate-between-interactions-and-commits.gif" alt="Navigate between interactions and commits"></p>
<p>The tracing API is still new and we will cover it in more detail in a future blog post.</p>
<h2 id="troubleshooting"><a href="#troubleshooting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Troubleshooting</h2>
<h3 id="no-profiling-data-has-been-recorded-for-the-selected-root"><a href="#no-profiling-data-has-been-recorded-for-the-selected-root" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>No profiling data has been recorded for the selected root</h3>
<p>If your your application has multiple “roots”, you may see the following message after profiling:
<img src="../images/blog/introducing-the-react-profiler/no-profiler-data-multi-root.png" alt="No profiling data has been recorded for the selected root"></p>
<p>This message indicates that no performance data was recorded for the root that’s selected in the “Elements” panel.
In this case, try selecting a different root in that panel to view profiling information for that root:</p>
<p><img src="../images/blog/introducing-the-react-profiler/select-a-root-to-view-profiling-data.gif" alt="Select a root in the &#x22;Elements&#x22; panel to view its performance data"></p>
<h3 id="no-timing-data-to-display-for-the-selected-commit"><a href="#no-timing-data-to-display-for-the-selected-commit" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>No timing data to display for the selected commit</h3>
<p>Sometimes a commit may be so fast that <code class="gatsby-code-text">performance.now()</code> doesn’t give DevTools any meaningful timing information.
In this case, the following message will be shown:</p>
<p><img src="../images/blog/introducing-the-react-profiler/no-timing-data-for-commit.png" alt="No timing data to display for the selected commit"></p>
<h2 id="deep-dive-video"><a href="#deep-dive-video" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deep dive video</h2>
<p>The following video demonstrates how the React profiler can be used to detect and improve performance bottlenecks in an actual React application.</p>
<br>
<div>
          <div
            class="gatsby-resp-iframe-wrapper"
            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;"
          >
            <iframe src="https://www.youtube-nocookie.com/embed/nySib7ipZdk?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen style="
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          "></iframe>
          </div>
          </div>]]></description><link>https://doc.react-china.org/blog/2018/09/10/introducing-the-react-profiler.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/09/10/introducing-the-react-profiler.html</guid><pubDate>Mon, 10 Sep 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[React v16.4.2: Server-side vulnerability fix]]></title><description><![CDATA[<p>We discovered a minor vulnerability that might affect some apps using ReactDOMServer. We are releasing a patch version for every affected React minor release so that you can upgrade with no friction. Read on for more details.</p>
<h2 id="概述"><a href="#%E6%A6%82%E8%BF%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>概述</h2>
<p>Today, we are releasing a fix for a vulnerability we discovered in the <code class="gatsby-code-text">react-dom/server</code> implementation. It was introduced with the version 16.0.0 and has existed in all subsequent releases until today.</p>
<p>This vulnerability <strong>can only affect some server-rendered React apps.</strong> Purely client-rendered apps are <strong>not</strong> affected. Additionally, we expect that most server-rendered apps don’t contain the vulnerable pattern described below. Nevertheless, we recommend to follow the mitigation instructions at the earliest opportunity.</p>
<p>While we were investigating this vulnerability, we found similar vulnerabilities in a few other popular front-end libraries. We have coordinated this release together with <a href="https://github.com/vuejs/vue/releases/tag/v2.5.17">Vue</a> and <a href="https://github.com/developit/preact-render-to-string/releases/tag/3.7.1">Preact</a> releases fixing the same issue. The tracking number for this vulnerability is <code class="gatsby-code-text">CVE-2018-6341</code>.</p>
<h2 id="mitigation"><a href="#mitigation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mitigation</h2>
<p><strong>We have prepared a patch release with a fix for every affected minor version.</strong></p>
<h3 id="160x"><a href="#160x" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>16.0.x</h3>
<p>如果你在这个版本中使用 <code class="gatsby-code-text">react-dom/server</code> ：</p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.0.0</code></li>
</ul>
<p>升级到下面的版本来替换之前的版本。</p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.0.1</code> <strong>(contains the mitigation)</strong></li>
</ul>
<h3 id="161x"><a href="#161x" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>16.1.x</h3>
<p>如果你在下面的任何一个版本中使用 <code class="gatsby-code-text">react-dom/server</code></p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.1.0</code></li>
<li><code class="gatsby-code-text">react-dom@16.1.1</code></li>
</ul>
<p>升级到下面的版本来替换之前的版本。</p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.1.2</code> <strong>(contains the mitigation)</strong></li>
</ul>
<h3 id="162x"><a href="#162x" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>16.2.x</h3>
<p>如果你在下面的版本中使用 <code class="gatsby-code-text">react-dom/server</code>：</p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.2.0</code></li>
</ul>
<p>升级到下面的版本来替换之前的版本。</p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.2.1</code> <strong>(contains the mitigation)</strong></li>
</ul>
<h3 id="163x"><a href="#163x" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>16.3.x</h3>
<p>如果你在下面的任何一个版本中使用 <code class="gatsby-code-text">react-dom/server</code>：</p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.3.0</code></li>
<li><code class="gatsby-code-text">react-dom@16.3.1</code></li>
<li><code class="gatsby-code-text">react-dom@16.3.2</code></li>
</ul>
<p>升级到下面的版本来替换之前的版本。</p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.3.3</code> <strong>(contains the mitigation)</strong></li>
</ul>
<h3 id="164x"><a href="#164x" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>16.4.x</h3>
<p>如果你在下面的任何一个版本中使用 <code class="gatsby-code-text">react-dom/server</code>：</p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.4.0</code></li>
<li><code class="gatsby-code-text">react-dom@16.4.1</code></li>
</ul>
<p>升级到下面的版本来替换之前的版本。</p>
<ul>
<li><code class="gatsby-code-text">react-dom@16.4.2</code> <strong>(contains the mitigation)</strong></li>
</ul>
<p>If you’re using a newer version of <code class="gatsby-code-text">react-dom</code>, no action is required.</p>
<p>Note that only the <code class="gatsby-code-text">react-dom</code> package needs to be updated.</p>
<h2 id="细节描述"><a href="#%E7%BB%86%E8%8A%82%E6%8F%8F%E8%BF%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>细节描述</h2>
<p>只有当这两个条件都为真时，您的应用程序才会受到这个漏洞的影响：</p>
<ul>
<li>您的应用程序正在使用HTML呈现 <a href="/docs/react-dom-server.html">ReactDOMServer API</a>, 并且</li>
<li>您的应用程序在<strong>HTML标记中包含用户提供的属性名</strong>。</li>
</ul>
<p>具体说，脆弱模式就像下面的代码：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">let</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="gatsby-highlight-code-line">props<span class="token punctuation">[</span>userProvidedData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
</span><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
      </div>
<p>为了利用这个脆弱模式，攻击者需要创建一个触发 XSS 漏洞的特殊属性名。例如：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">let</span> userProvidedData <span class="token operator">=</span> <span class="token string">'>&lt;/div>&lt;script>alert("hi")&lt;/script>'</span><span class="token punctuation">;</span>
</code></pre>
      </div>
<p>In the vulnerable versions of <code class="gatsby-code-text">react-dom/server</code>, the output would let the attacker inject arbitrary markup:</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
      </div>
<p>In the versions after the vulnerability was <a href="https://github.com/facebook/react/pull/13302">fixed</a> (and before it was introduced), attributes with invalid names are skipped:</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
      </div>
<p>You would also see a warning about an invalid attribute name.</p>
<p>Note that <strong>we expect attribute names based on user input to be very rare in practice.</strong> It doesn’t serve any common practical use case, and has other potential security implications that React can’t guard against.</p>
<h2 id="安装"><a href="#%E5%AE%89%E8%A3%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装</h2>
<p>React 16.4.2 版本可以在 npm 上获取。</p>
<p>使用 Yarn 安装 React 16 版本，运行下面的命令：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-bash"><code class="gatsby-code-bash">yarn add react@^16.4.2 react-dom@^16.4.2
</code></pre>
      </div>
<p>使用 npm 安装 React 16 版本，运行下面的命令：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-bash"><code class="gatsby-code-bash"><span class="token function">npm</span> <span class="token function">install</span> --save react@^16.4.2 react-dom@^16.4.2
</code></pre>
      </div>
<p>我们也提供了通过 CDN 的方式 UMD 建立React的方法：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react@16/umd/react.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@16/umd/react-dom.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
      </div>
<p>点击链接获取 <a href="/docs/installation.html">更详细的安装教程</a>.</p>
<h2 id="更新日志"><a href="#%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更新日志</h2>
<h3 id="react-dom-服务器"><a href="#react-dom-%E6%9C%8D%E5%8A%A1%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React DOM 服务器</h3>
<ul>
<li>
<p>Fix a potential XSS vulnerability when the attacker controls an attribute name (<code class="gatsby-code-text">CVE-2018-6341</code>). This fix is available in the latest <code class="gatsby-code-text">react-dom@16.4.2</code>, as well as in previous affected minor versions: <code class="gatsby-code-text">react-dom@16.0.1</code>, <code class="gatsby-code-text">react-dom@16.1.2</code>, <code class="gatsby-code-text">react-dom@16.2.1</code>, and <code class="gatsby-code-text">react-dom@16.3.3</code>. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/13302">#13302</a>)</p>
</li>
<li>
<p>Fix a crash in the server renderer when an attribute is called <code class="gatsby-code-text">hasOwnProperty</code>. This fix is only available in <code class="gatsby-code-text">react-dom@16.4.2</code>. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/13303">#13303</a>)</p>
</li>
</ul>]]></description><link>https://doc.react-china.org/blog/2018/08/01/react-v-16-4-2.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/08/01/react-v-16-4-2.html</guid><pubDate>Wed, 01 Aug 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[You Probably Don't Need Derived State]]></title><description><![CDATA[<p>React 16.4  <a href="/blog/2018/05/23/react-v-16-4.html#bugfix-for-getderivedstatefromprops">修复了一个关于 getDerivedStateFromProps 的 bug</a>。若这篇文章提及了你应用中正在使用的反模式，并在修复后导致了无法正确工作，我们对此感到抱歉。在这篇文章，我们将对在派生状态下普遍使用的反模式以及我们倾向的选择方案进行说明。</p>
<p>在很长的一段时间，生命周期 <code class="gatsby-code-text">componentWillReceiveProps</code> 是唯一的能够在 props 变更时更新状态而不触发渲染的唯一方式。在 16.3，<a href="https://reactjs.org/blog/2018/03/29/react-v-16-3.html#component-lifecycle-changes">我们引入了一个替代的生命周期，<code class="gatsby-code-text">getDerivedStateFromProps</code></a> 用以更安全的方式来解决同样的问题。同时，我们意识到有些用户可能会对如何使用这两个方法有很多误解，我们也发现了一些反模式会导致潜在的令人困惑的 bug。在 16.4 中修复的 <code class="gatsby-code-text">getDerivedStateFromProps</code> <a href="https://github.com/facebook/react/issues/12898">使得派生状态会更容易预测</a>，因此一些错误的用例会更容易注意到。</p>
<blockquote>
<p>注意</p>
<p>本文所提及的反模式同时应用了 <code class="gatsby-code-text">componentWillReceivedProps</code> 和 <code class="gatsby-code-text">getDerivedStateFromProps</code> 两个方法。</p>
</blockquote>
<p>本文将涵盖以下主题：</p>
<ul>
<li><a href="#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E6%B4%BE%E7%94%9F%E7%8A%B6%E6%80%81">何时使用派生状态</a></li>
<li>
<p><a href="#%E4%BD%BF%E7%94%A8%E6%B4%BE%E7%94%9F%E7%8A%B6%E6%80%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">使用派生状态的一些常见问题</a></p>
<ul>
<li>[反模式：无条件地将 props 拷贝到状态上](#反模式：无条件地将 props 拷贝到状态上)</li>
<li>[反模式：当 props 更新时擦除状态](#反模式：当 props 更新时擦除状态)</li>
</ul>
</li>
<li><a href="#%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">更好的解决方案</a></li>
<li><a href="#%E8%AE%B0%E5%BF%86%E5%8C%96%EF%BC%88memoization%EF%BC%89%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A1%8C%EF%BC%9F">记忆化（memoization）是否可行？</a></li>
</ul>
<h2 id="何时使用派生状态"><a href="#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E6%B4%BE%E7%94%9F%E7%8A%B6%E6%80%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>何时使用派生状态</h2>
<p><code class="gatsby-code-text">getDerivedStateFromeProps</code> 存在仅有一个目的。其能够让组件在 <strong>prop 变更时</strong> 更新内部的状态。我们之前的博文提供了一些例子，例如<a href="/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props">基于当前变更的偏移（offset）prop 记录当前的滚动方向</a> 或者 <a href="/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data-when-props-change">通过资源 prop 加载额外的特定资源</a>。 </p>
<p>我们没有提供更多的例子，因为作为一个通用规则，<strong>派生状态应谨慎使用</strong>。我们所见过的所有的由派生状态导致的问题最终都可归结为（1）无条件的通过 props 来更新状态或（2）无论 props 是否和 状态匹配都更新状态。（我们将在接下来更为细致地探讨这两个问题。）</p>
<ul>
<li>若你仅通过当前的 props 使用派生状态来缓存一些计算操作，则没必要使用派生状态。可查看 <a href="#what-about-memoization">记忆化是否可行？</a>一节。</li>
<li>若你只是无条件的更新派生状态或无论 props 和状态是否匹配都进行更新，你的组件可能太过于频繁的重置它的内部状态。继续阅读了解更多细节。</li>
</ul>
<h2 id="使用派生状态的一些常见问题"><a href="#%E4%BD%BF%E7%94%A8%E6%B4%BE%E7%94%9F%E7%8A%B6%E6%80%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用派生状态的一些常见问题</h2>
<p>术语 <a href="/docs/forms.html#controlled-components">“受控”</a> 和 <a href="/docs/uncontrolled-components.html">“非受控”</a> 通常指的是表单的输入框，但它们也可用于描述组件的数据的生命周期。作为 props 传递组件可以认为是 <strong>受控</strong>的（因为父组件<em>控制</em>那ß些数据）。仅存在于内部状态的数据则可以认为是<strong>非受控的</strong>（因为父组件无法直接改变它）。</p>
<p>派生组件最常见的错误是混淆了这两者；当一个派生状态的值也能通过 <code class="gatsby-code-text">setState</code> 调用来更新时，之前在<a href="/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data-when-props-change">额外的数据加载例子</a>可能听起来有些类似，但在一些重要的方式上存在着差异。在加载的例子中，对于 “source” prop 和 “loading” 状态都有一个清晰的来源。当 source prop 发生改变，loading 状态则应当<strong>永远</strong>被重写。反过来，仅当 prop <strong>发生改变</strong>并且由组件管理时，状态才会被重写。</p>
<p>当这些约束的任何一条被改变都会引发问题。典型的情况是在两个表单下。让我们来看个例子。</p>
<h3 id="反模式：无条件地将-props-拷贝到状态上"><a href="#%E5%8F%8D%E6%A8%A1%E5%BC%8F%EF%BC%9A%E6%97%A0%E6%9D%A1%E4%BB%B6%E5%9C%B0%E5%B0%86-props-%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%8A%B6%E6%80%81%E4%B8%8A" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>反模式：无条件地将 props 拷贝到状态上</h3>
<p>一个普遍的误解是 <code class="gatsby-code-text">getDerivedStateFromProps</code> 和 <code class="gatsby-code-text">componentWillReceiveProps</code> 仅在 props 改变时被调用。这些生命周期会在父组件重新渲染时被调用，无论其 props 是否和之前有不同。由于这一原因，总是<em>无条件</em>地使用这些生命周期重载状态是不安全的。<strong>这么做可能会导致更新状态的丢失。</strong></p>
<p>考虑一个描述了这一问题的例子。有一个将 email prop 复制到状态的 <code class="gatsby-code-text">EmailInput</code> 的组件：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span> email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>email <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This will erase any local state updates!</span>
    <span class="token comment">// Do not do this.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">:</span> nextProps<span class="token punctuation">.</span>email <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>首先，该组件看起来没问题。状态通过特定的 prop 进行初始化并当我们在 <code class="gatsby-code-text">&lt;input&gt;</code> 中输入时进行更新。但如果我们组件的父元素重渲，任何我们在 <code class="gatsby-code-text">&lt;input&gt;</code> 中的输入都将丢失！（<a href="https://codesandbox.io/s/m3w9zn1z8x">查看这一例子。</a>）即使我们在重置前对 <code class="gatsby-code-text">nextProps.email !== this.state.email</code> 进行比较，仍返回真。</p>
<p>在这一例子中，增加 <code class="gatsby-code-text">shouldComponentUpdate</code> 方法保证当且仅当 email prop 发生变更时才进行重渲可能能修复该问题。然而在实践中，组件通常可以接受多个 props；另一个 prop 的变更仍会导致重渲并进行错误的重置。函数和对象类型的 props 常通过内联的形式创建，使得其很难实现一个可靠的 <code class="gatsby-code-text">shouldComponentUpdate</code> 保证当且仅当元素变更时才返回真值。<a href="https://codesandbox.io/s/jl0w6r9w59">这一例子描述了具体的内容。</a>最终，<code class="gatsby-code-text">shouldComponentUpdate</code> 最好用于性能优化，而不是保证派生状态的正确性。</p>
<p>希望现在对于为何<strong>无条件地将 prop 复制到状态是个糟糕的理念</strong>已经解释清楚了。在回顾可行的解决方案前，先来看一个相关的问题模式：要是我们仅在 email prop 发生变更时才更新如何？</p>
<h3 id="反模式：当-props-更新时擦除状态"><a href="#%E5%8F%8D%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%BD%93-props-%E6%9B%B4%E6%96%B0%E6%97%B6%E6%93%A6%E9%99%A4%E7%8A%B6%E6%80%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>反模式：当 props 更新时擦除状态</h3>
<p>继续之前的例子，我们可以仅当 <code class="gatsby-code-text">props.email</code> 变更时进行更新来避免意外的擦除状态：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>email
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Any time props.email changes, update state.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>email <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        email<span class="token punctuation">:</span> nextProps<span class="token punctuation">.</span>email
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<blockquote>
<p>注意</p>
<p>即使之前的例子展示了 <code class="gatsby-code-text">componentWillReceiveProps</code>，其和使用 <code class="gatsby-code-text">getDerivedStateFromProps</code> 一样是反模式。</p>
</blockquote>
<p>我们做了一个巨大的提升。现在我们的组件仅当 props 真的改变时才会擦除我们的输入。</p>
<p>这仍然存在一个潜在的问题。想象一个使用了之前输入框组件的密码管理应用。当定位到了使用相同邮箱的两个账户，输入框将无法进行重设。这是由于两个账户传递给组件的值都是相同的！这可能会让用户感到诧异，由于碰巧使用了相同的邮箱，对于一个账户的不安全变更的出现会影响到其他账户。（<a href="https://codesandbox.io/s/mz2lnkjkrx">点击查看案例。</a>）</p>
<p>这一设计存在潜在的缺陷，但却很容易犯。（<a href="https://twitter.com/brian_d_vaughn/status/959600888242307072">我自己也曾出错过！</a>）幸运的是有两种替代方案效果更好。二者的关键在于 <strong>对于数据的任何部分，你需要保证其是一个组件唯一数据源，并避免将其复制给其他组件。</strong>现在来看一下每种替代的方案。</p>
<h2 id="更好的解决方案"><a href="#%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更好的解决方案</h2>
<h3 id="推荐方案：完全受控组件"><a href="#%E6%8E%A8%E8%8D%90%E6%96%B9%E6%A1%88%EF%BC%9A%E5%AE%8C%E5%85%A8%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>推荐方案：完全受控组件</h3>
<p>一种可以避免之前提到的问题的方式是将状态从我们的组件中完全移除。如果邮箱地址仅作为 prop 存在，而后我们就不需要担心和状态产生冲突的问题。我们甚至可以将 <code class="gatsby-code-text">EmailInput</code> 变为一个轻量的函数组件：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">function</span> <span class="token function">EmailInput</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>这一方法简化了我们的组件实现，但如果仍想要保存一个临时的值，现在需要父组件去手动进行调整。（<a href="https://codesandbox.io/s/7154w1l551">点击查看这一模式示例。</a>）</p>
<h3 id="推荐方案：带-key-的完全不受控组件"><a href="#%E6%8E%A8%E8%8D%90%E6%96%B9%E6%A1%88%EF%BC%9A%E5%B8%A6-key-%E7%9A%84%E5%AE%8C%E5%85%A8%E4%B8%8D%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>推荐方案：带 <code class="gatsby-code-text">key</code> 的完全不受控组件</h3>
<p>另一个对于我们组件来说可行的替代方案是完全由我们的组件来“定义” email 状态。在这一情况下，我们的组件仍接受一个 prop 作为<em>初始</em>值，但其会忽略该 prop 可能的变更：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span> email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>defaultEmail <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>为了保证当传入一个不同的内容时能重设该值（类似我们的密码管理器的场景），我们可以使用一个被称为 <code class="gatsby-code-text">key</code> 的特殊的 React 特性。当一个 <code class="gatsby-code-text">key</code> 变更时，React 将 <a href="/docs/reconciliation.html#keys"><em>创建</em>一个新的组件实例而不是更新当前组件</a>。Keys 通常被用于动态列表但也适用于这里的场景。在我们的案例中，我们可以在任意时间上当新用户被选定时使用用户的 ID 重建邮件输入框：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EmailInput</span>
  <span class="token attr-name">defaultEmail</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span>
  <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span>
<span class="token punctuation">/></span></span>
</code></pre>
      </div>
<p>每次 ID 的变更，<code class="gatsby-code-text">EmailInput</code> 都会重新创建且它的内部状态将会被重设为最新的 <code class="gatsby-code-text">defaultEmail</code> 值。（<a href="https://codesandbox.io/s/6v1znlxyxn">点击查看这一模式。</a>）通过这一方式，你不必给每个输入框添加一个 <code class="gatsby-code-text">key</code>。而给整个表单设置一个 <code class="gatsby-code-text">key</code> 似乎更有意义。每次 key 变更时，所有表单的内部组件将会重建并带有一个最新的初始值。</p>
<p>在大多数场景下，这是最好的处理状态需要变更的方式。</p>
<blockquote>
<p>注意</p>
<p>这一方是听上去可能比较慢，但性能上并没有明显的差异。如果该组件包含了繁重的逻辑如通过对比传递给子树的 prop 来进行更新等， 使用 key 甚至会更快。</p>
</blockquote>
<h4 id="替代方案-1：通过-id-prop-重置非受控组件"><a href="#%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88-1%EF%BC%9A%E9%80%9A%E8%BF%87-id-prop-%E9%87%8D%E7%BD%AE%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>替代方案 1：通过 ID prop 重置非受控组件</h4>
<p>若 <code class="gatsby-code-text">key</code> 在某些情况下不生效（可能是乳尖在初始化时非常耗时），一个可行但非常笨重的解决方案是在 <code class="gatsby-code-text">getDerivedStateFromeProps</code> 方法里监听 “userID” 的变更：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>defaultEmail<span class="token punctuation">,</span>
    prevPropsUserID<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>userID
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Any time the current user changes,</span>
    <span class="token comment">// Reset any parts of state that are tied to that user.</span>
    <span class="token comment">// In this simple example, that's just the email.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>userID <span class="token operator">!==</span> state<span class="token punctuation">.</span>prevPropsUserID<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        prevPropsUserID<span class="token punctuation">:</span> props<span class="token punctuation">.</span>userID<span class="token punctuation">,</span>
        email<span class="token punctuation">:</span> props<span class="token punctuation">.</span>defaultEmail
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>如果我们选择了这一方式，其也提供了一种灵活的方式来仅重置我们组件内部的部分状态。（<a href="https://codesandbox.io/s/rjyvp7l3rq">点击查看这一模式。</a>）</p>
<blockquote>
<p>Note</p>
<p>Even though the example above shows <code class="gatsby-code-text">getDerivedStateFromProps</code>, the same technique can be used with <code class="gatsby-code-text">componentWillReceiveProps</code>.</p>
</blockquote>
<blockquote>
<p>注意</p>
<p>即使之前的例子使用了 <code class="gatsby-code-text">getDerivedStateFromProps</code>，其同样也可以使用 <code class="gatsby-code-text">componentWillReceiveProps</code>。</p>
</blockquote>
<h4 id="替代方案-2：通过实例方法重置非受控组件"><a href="#%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88-2%EF%BC%9A%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E9%87%8D%E7%BD%AE%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>替代方案 2：通过实例方法重置非受控组件</h4>
<p>更少见的是，即使没有合适的 ID 作为 <code class="gatsby-code-text">key</code>，你也需要重置状态。一种解决方案是重设 key 为一个随机值或每次设置一个你期望的自增的数字。另一种可行的替代方案是暴露一个实例方法来强制重置内部状态：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>defaultEmail
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">resetEmailForNewUser</span><span class="token punctuation">(</span>newEmail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">:</span> newEmail <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>父表单组件而后可以通过<a href="/docs/glossary.html#refs">使用 <code class="gatsby-code-text">ref</code> 来调用这一方法</a>。(<a href="https://codesandbox.io/s/l70krvpykl">点击查看这一例子。</a>)</p>
<p>Ref 在特定的情况下非常有用，如这一场景，但通常我们推荐你尽量不要使用。甚至在这一情况，这一强制的方法并不理想，因为会引发两次渲染而不是一次。</p>
<hr>
<h3 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h3>
<p>作为概括，当在设计一个组件时，决定其数据是受控还是非受控非常关键。</p>
<p>让组件变得<strong>可控</strong>，以及在父组件中将两个不同的值进行合并，而不是仅仅尝试将<strong>prop 的值“复制”到状态中</strong>。例如，与其让子组件接受一个“提交”的 <code class="gatsby-code-text">props.value</code> 并追踪“变更(draft)”的 <code class="gatsby-code-text">state.value</code>，不如让父组件同时管理 <code class="gatsby-code-text">state.draftValue</code> 和 <code class="gatsby-code-text">state.committedValue</code> 并直接控制子组件的值。这让数据流更为直接和可预测。</p>
<p>对于<strong>非受控</strong>组件，如果你尝试当一个特殊的 prop（通常是 ID） 改变时重置状态，通常有以下一些选择：</p>
<ul>
<li><strong>建议：使用 <code class="gatsby-code-text">key</code> 属性来重置<em>所有内部状态</em>。</strong></li>
<li>方案1：监听一些特殊属性的变更（如：<code class="gatsby-code-text">props.userID</code>），重置<em>特定的状态</em>。</li>
<li>方案2：可以考虑通过 refs 强制调用实例方法来进行刷新。</li>
</ul>
<h2 id="记忆化（memoization）是否可行？"><a href="#%E8%AE%B0%E5%BF%86%E5%8C%96%EF%BC%88memoization%EF%BC%89%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A1%8C%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>记忆化（memoization）是否可行？</h2>
<p>我们已经看到了派生状态被用于确保在 <code class="gatsby-code-text">render</code> 方法中仅当输入改变时进行重新计算。这一技术也被认为是 <a href="https://en.wikipedia.org/wiki/Memoization">记忆化</a>。</p>
<p>对于记忆化来说，使用派生状态并不算糟糕，但通常来说也不算最佳的解决方案。在管理派生状态存在着内涵的复杂性，而这一复杂性随着增加的属性也在不断地提升。例如，如果我们给我们的组件增加了第二个派生状态，而后我们也将在分别跟踪这二者的变更。</p>
<p>现在来看一个接受一个 props 的组件的例子-展示一系列内容的列表-并将与用户输入匹配的查询渲染出来。我们可以用派生状态来存储过滤后的列表：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    filterText<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// *******************************************************</span>
  <span class="token comment">// NOTE: this example is NOT the recommended approach.</span>
  <span class="token comment">// See the examples below for our recommendations instead.</span>
  <span class="token comment">// *******************************************************</span>

  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Re-run the filter whenever the list array or filter text change.</span>
    <span class="token comment">// Note we need to store prevPropsList and prevFilterText to detect changes.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      props<span class="token punctuation">.</span>list <span class="token operator">!==</span> state<span class="token punctuation">.</span>prevPropsList <span class="token operator">||</span>
      state<span class="token punctuation">.</span>prevFilterText <span class="token operator">!==</span> state<span class="token punctuation">.</span>filterText
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        prevPropsList<span class="token punctuation">:</span> props<span class="token punctuation">.</span>list<span class="token punctuation">,</span>
        prevFilterText<span class="token punctuation">:</span> state<span class="token punctuation">.</span>filterText<span class="token punctuation">,</span>
        filteredList<span class="token punctuation">:</span> props<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filterText<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filteredList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>该实现避免了更频繁地重复计算 <code class="gatsby-code-text">filteredList</code>。但其也更复杂，因为不得不单独地追踪和监测每一个 prop 和状态的变更以为了正确地更新过滤列表。在这一例子中，我们可以通过使用 <code class="gatsby-code-text">PureComponent</code> 以及将过滤操作放进渲染方法里来进行简化：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">// PureComponents only rerender if at least one state or prop value changes.</span>
<span class="token comment">// Change is determined by doing a shallow comparison of state and prop keys.</span>
<span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>
  <span class="token comment">// State only needs to hold the current filter text value:</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    filterText<span class="token punctuation">:</span> <span class="token string">""</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filterText<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The render method on this PureComponent is called only if</span>
    <span class="token comment">// props.list or state.filterText has changed.</span>
    <span class="token keyword">const</span> filteredList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>
      item <span class="token operator">=></span> item<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>filteredList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>之前提到的方法相较于派生状态的版本要更为的清晰和简单。有时，这对于大型列表来说这一方法就可能不那么好了有可能会比较慢，<code class="gatsby-code-text">PureComponent</code> 也有可能无法阻止重渲染若另外的 prop 发生了改变。为了处理这些问题，我们可以增加一个记忆化的帮助函数来避免不必要的重新过滤我们的列表项：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">import</span> memoize <span class="token keyword">from</span> <span class="token string">"memoize-one"</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// State only needs to hold the current filter text value:</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span> filterText<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Re-run the filter whenever the list array or filter text changes:</span>
  filter <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>list<span class="token punctuation">,</span> filterText<span class="token punctuation">)</span> <span class="token operator">=></span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>filterText<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filterText<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Calculate the latest filtered list. If these arguments haven't changed</span>
    <span class="token comment">// since the last render, `memoize-one` will reuse the last return value.</span>
    <span class="token keyword">const</span> filteredList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>filteredList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>这一实现则更为简单且和之前派生状态的版本行为一致！</p>
<p>当在使用记忆化时，记住几点限制：</p>
<ol>
<li>大多数场景，你想要<strong>记忆函数来标记组件实例</strong>。这一行为阻止了组件多个实例通过每一个不同的 key 进行重置。</li>
<li>典型地你想要用一个缓存函数来<strong>限制缓存大小</strong>以避免时不时地内存泄露。（在前一个例子中，我们使用了 <code class="gatsby-code-text">memoize-one</code>，因为它仅缓存最新的参数和结果。）</li>
<li>如果在每次父组件渲染时 <code class="gatsby-code-text">prop.list</code> 都重新创建，那么本节提到的所有方法都将不会起作用。但大多数场景下，这一设置是合理的。</li>
</ol>
<h2 id="尾声"><a href="#%E5%B0%BE%E5%A3%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>尾声</h2>
<p>真是世界的应用里，组件通常混合了受控和非受控的行为。这是没问题的！如果每一个值都只有一个清晰的来源，则可以避免之前提及的反模式。</p>
<p>值得重申的是 <code class="gatsby-code-text">getDerivedStateFromProps</code>（通常是派生状态）是一个高级特性，由于其 复杂性应尽可能地避免使用。如果你在使用这些模式中出现了我们未曾提及的问题，可以通过 <a href="https://github.com/reactjs/reactjs.org/issues/new">Github</a> 或 <a href="https://twitter.com/reactjs">Tiwtter</a> 与我们分享！</p>]]></description><link>https://doc.react-china.org/blog/2018/06/07/you-probably-dont-need-derived-state.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/06/07/you-probably-dont-need-derived-state.html</guid><pubDate>Thu, 07 Jun 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[React v16.4.0: Pointer Events]]></title><description><![CDATA[<p>最新的版本（16.4.0）增加了对经常请求的特性——指针事件的支持；</p>
<p>这个版本也包含了对于 <code class="gatsby-code-text">getDerivedStateFromProps</code> 的bug修复工作。</p>
<p>It also includes a bugfix for <code class="gatsby-code-text">getDerivedStateFromProps</code>. 查看下面完整的<a href="#changelog">更新日志</a> 。</p>
<h2 id="指针事件"><a href="#%E6%8C%87%E9%92%88%E4%BA%8B%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>指针事件</h2>
<p>在 React DOM 中，现在可以使用如下指针事件：</p>
<ul>
<li><code class="gatsby-code-text">onPointerDown</code></li>
<li><code class="gatsby-code-text">onPointerMove</code></li>
<li><code class="gatsby-code-text">onPointerUp</code></li>
<li><code class="gatsby-code-text">onPointerCancel</code></li>
<li><code class="gatsby-code-text">onGotPointerCapture</code></li>
<li><code class="gatsby-code-text">onLostPointerCapture</code></li>
<li><code class="gatsby-code-text">onPointerEnter</code></li>
<li><code class="gatsby-code-text">onPointerLeave</code></li>
<li><code class="gatsby-code-text">onPointerOver</code></li>
<li><code class="gatsby-code-text">onPointerOut</code></li>
</ul>
<p>请注意，这些事件只能在支持 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">指针事件</a> 规范的浏览器中工作。(在编写本文时，包括Chrome、Firefox、Edge和Internet Explorer的最新版本。) 如果你的应用程序依赖于指针事件，我们建议使用第三方指针事件 polyfill 。为了避免增加包文件的大小，我们在 React DOM 中不包含这样的 polyfill。（译者注：Polyfill 是一块代码，用来为旧浏览器提供它没有原生支持的较新的功能。）</p>
<p><a href="https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-ggDQgI5NgA9iCZCBqMGTRKIC2KUgCdaAAgBKMTDrAbSK7QHINBjLXMBuADrkIazTv2GAIgHkAstuNTCytDAFoWU3snJ3k4HQBhAEldeIAZAFEAfQBlRIAtdO0AXm0ADgBWR3IYqDQ4OG1PDTwAIVIJbRgJenEGjxsCeNN1ckVtYCdtbTi0emLxyantAAs6-LQUWgBXK0QAtCg4GCFFqZ4NDFhUmDBaPdKABhPyJe1zy5gAFVIUe6fF_hVKYQOBNPC4MS4eZgA5HIHaFBWABuEFIWzg11u8we8MRMBRaLg3xQ2KqiwonlIAHcXiV8WMigA-BYvJa0ZYggggsG4CHkKElWgaLYweFTemMAi0NAafC0AhHWgABVIYnoGnWmx2MAAFBL5eo1TANIkWABKMmsqYAemt2gA6jBprRNE72U6xBBaBADm9SJoWGJZvBtC7tAAjJ1ocOwUOkN4HDBbWpzd1vVb8-CnbS27Qp43aCgEbPszldIWGFVwL2o8ieGBQaV6pGKC0Ay1TCi-Ugt-b64rMiZW7QQMDaHUAQlLcC5oOavMhZpZrymVm2GnIYu0_GzsR0wFgtyEcZQ_Hm04I5eaNirNYpDab-rb1WHF8V2Wl9B1OuA7yuN1oY8_y-H5-CXJlxyHFc3ggC5_1uPZgMxHQAGo8wA55oOA4lENgj5iW0NCXRQTCljA58pkBaJWQoABVEk6RbRgB3HC9uXnPkBX2Q4YAowtyAAcVIWhNXXJ1GIZZk3xgWgP2DH9VjgUTtT2IURTA-EKFSUg4mUqw-yYnQmRLDkZ3fT9dWARS9JgPYYR4jTqPFbpr2VHS7zrB80AMyTlyWPd0KxCTJXQfAAA0twC4ifJCvAYAATUiig4m0NhG28kooJXQ87kCnRQlDUyCDxAl0WQ0jXmI1Sfm0AqLxK1F0WJCrty3erkUajEAPmHK2qKhrCQIwUfi3NcdheNLpXhKiX1XThjR1JcsrOZL92sjYxKAvD4MAmC4JA09zyKmZ6A7fzVojdoPwAT1jTLsymcMA2NPZzAARhQDoyCgCAWG0ABiFgAE5geB8wWqmFQZT5V63oeT7tAebQACZ4YkcGHu0FQxAACRgCBcGWXKABYHn-YcpipX72VhsmAFIMYphF3O9ChXqsFMIBbRnXhm3cLuAm67r814qZYGntCSFIMhyfJ0ghlZ8cJ3KpbSLJcgKBWno0NgNF0NBA3RPZVZljXCjtZGFfUatWfIV7o2-rZ6B57KANw_bysxqq9vwn4tcwLBcBMLZxCGKBND2datX0gB-CwYxFcxtFeoOYAYF3KrRDBlgAQRsWtXvICgYAz1qnKWMaN3HTGAB5AyRZ1bpgIpgCeiQhZgfhGUxqY665nuljiJuW8F2gm53JnXgoFUjQ0SkaRbi8KWpcgJ-gqfyBnhQNG7FtF6Krse07gfO031Vt_o_fOTo08T_4rf1XWbgGyvmcb7X9fT6EtzZ5s1-CAoN_GyH9P5aR0j_bef9gBL3INpXSG1tQgJXNabuTMa7Wnrqg14fEJ4TycP0WgPhfAECsOIBaiwa48jaB0FBpEIhJhUIoAgcp0iwEYYwFo11TQ6ksP6WwZonDPhAPwEQYhJAECJioKAzB5A9CUCAPuDdfpFAcCAEwwlVGMnQZg4RgggA" target="_blank" rel="noreferrer">在沙箱中查看运行这个案例。</a></p>
<p>非常感谢 <a href="https://github.com/philipp-spiess">Philipp Spiess</a> 对于这个改变的巨大贡献！</p>
<h2 id="修复-getderivedstatefromprops-bug"><a href="#%E4%BF%AE%E5%A4%8D-getderivedstatefromprops-bug" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>修复 <code class="gatsby-code-text">getDerivedStateFromProps</code> bug</h2>
<p>不管更新的原因是什么，<code class="gatsby-code-text">getDerivedStateFromProps</code> 这个函数在组件的每一次渲染中都会被调用。以前，只有当父组件重新渲染时，才会调用这个函数。同时，当这个组件执行<code class="gatsby-code-text">setState</code>时不会触发这个函数。这是在最初实施时的疏忽造成的 bug，现在已经修复。这个函数之前的行为更类似于<code class="gatsby-code-text">compoenentWillReceiveProps</code>这个函数。但是，改进后的行为确保了与 React 框架即将推出的异步渲染模式的兼容。</p>
<p><strong>这个 bug 修复不会影响大部分应用。</strong>但是可能会造成一小部分组件部分的问题。这些罕见的案例主要影响在两个大类：</p>
<h3 id="1-避免getderivedstatefromprops函数的副作用"><a href="#1-%E9%81%BF%E5%85%8Dgetderivedstatefromprops%E5%87%BD%E6%95%B0%E7%9A%84%E5%89%AF%E4%BD%9C%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. 避免<code class="gatsby-code-text">getDerivedStateFromProps</code>函数的副作用</h3>
<p>就像渲染的方法，<code class="gatsby-code-text">getDerivedStateFromProps</code> 函数应该是一个纯净的 props 和 state 的函数。这个函数的副作用在 <code class="gatsby-code-text">getDerivedStateFromProps</code>从来没有支持。但由于它现在比过去的任何时候更受欢迎，最近的变化可能暴露出之前未被发现的一些bug。</p>
<p>函数产生副作用的代码，应该移动到其他方法中。例如，流量分派方法，通常属于原始事件处理程序内；手动DOM变化方法，通常属于内部 componentDidMount 或 componentDidUpdate 生命周琼函数中。你可以在我们最近关于准备发布的<a href="/blog/2018/03/27/update-on-async-rendering.html">异步呈现文章</a>中，了解更多信息。</p>
<h3 id="2-计算受控属性时，将新-props-和上一个-props-进行比较"><a href="#2-%E8%AE%A1%E7%AE%97%E5%8F%97%E6%8E%A7%E5%B1%9E%E6%80%A7%E6%97%B6%EF%BC%8C%E5%B0%86%E6%96%B0-props-%E5%92%8C%E4%B8%8A%E4%B8%80%E4%B8%AA-props-%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. 计算受控属性时，将新 props 和上一个 props 进行比较</h3>
<p>下面的代码假设 <code class="gatsby-code-text">getDerivedStateFromProps</code> 函数只在 props 更新的时候触发：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>value <span class="token operator">!==</span> state<span class="token punctuation">.</span>controlledValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// Since this method fires on both props and state changes, local updates</span>
      <span class="token comment">// to the controlled value will be ignored, because the props version</span>
      <span class="token comment">// always overrides it. Oops!</span>
      controlledValue<span class="token punctuation">:</span> props<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>解决这个问题的可能的方法是：将传入值与前一个值进行比较。具体方法是将前面的 props存储在 state 中。</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> prevProps <span class="token operator">=</span> state<span class="token punctuation">.</span>prevProps<span class="token punctuation">;</span>
  <span class="token comment">// Compare the incoming prop to previous prop</span>
  <span class="token keyword">const</span> controlledValue <span class="token operator">=</span>
    prevProps<span class="token punctuation">.</span>value <span class="token operator">!==</span> props<span class="token punctuation">.</span>value
      <span class="token operator">?</span> props<span class="token punctuation">.</span>value
      <span class="token punctuation">:</span> state<span class="token punctuation">.</span>controlledValue<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// Store the previous props in state</span>
    prevProps<span class="token punctuation">:</span> props<span class="token punctuation">,</span>
    controlledValue<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>然而， <strong>在 state 中存储“镜像” props 通常会包含 bug</strong>， 不管你使用新的 <code class="gatsby-code-text">getDerivedStateFromProps</code> 函数，或者旧的 <code class="gatsby-code-text">componentWillReceiveProps</code> 函数。我们发表了一篇后续的博客文章，更详细地解释了这些问题， 并且提出了<a href="/blog/2018/06/07/you-probably-dont-need-derived-state.html">不涉及<code class="gatsby-code-text">getDerivedStateFromProps()</code>函数的更简单的解决方案</a>。</p>
<h2 id="安装"><a href="#%E5%AE%89%E8%A3%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装</h2>
<p>你可以通过 npm 获取 React 16.4.0 版本。</p>
<p>使用 Yarn 安装 React 16 版本，运行下面的代码：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-bash"><code class="gatsby-code-bash">yarn add react@^16.4.0 react-dom@^16.4.0
</code></pre>
      </div>
<p>使用 npm 安装安装 React 16 版本，运行下面的代码：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-bash"><code class="gatsby-code-bash"><span class="token function">npm</span> <span class="token function">install</span> --save react@^16.4.0 react-dom@^16.4.0
</code></pre>
      </div>
<p>我们也提供了通过 CDN 的 UMD 方式搭建一个 React：</p>
<div class="gatsby-highlight">
      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react@16/umd/react.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@16/umd/react-dom.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
      </div>
<p>请参阅文档获取详细的<a href="/docs/installation.html">安装方法</a>。</p>
<h2 id="更新日志"><a href="#%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更新日志</h2>
<h3 id="react"><a href="#react" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React</h3>
<ul>
<li>Add a new <a href="https://github.com/reactjs/rfcs/pull/51">experimental</a> <code class="gatsby-code-text">React.unstable_Profiler</code> component for measuring performance. (<a href="https://github.com/bvaughn">@bvaughn</a> in <a href="https://github.com/facebook/react/pull/12745">#12745</a>)</li>
</ul>
<h3 id="react-dom"><a href="#react-dom" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React DOM</h3>
<ul>
<li>Add support for the Pointer Events specification. (<a href="https://github.com/philipp-spiess">@philipp-spiess</a> in <a href="https://github.com/facebook/react/pull/12507">#12507</a>)</li>
<li>Properly call <code class="gatsby-code-text">getDerivedStateFromProps()</code> regardless of the reason for re-rendering. (<a href="https://github.com/acdlite">@acdlite</a> in <a href="https://github.com/facebook/react/pull/12600">#12600</a> and <a href="https://github.com/facebook/react/pull/12802">#12802</a>)</li>
<li>Fix a bug that prevented context propagation in some cases. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/12708">#12708</a>)</li>
<li>Fix re-rendering of components using <code class="gatsby-code-text">forwardRef()</code> on a deeper <code class="gatsby-code-text">setState()</code>. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/12690">#12690</a>)</li>
<li>Fix some attributes incorrectly getting removed from custom element nodes. (<a href="https://github.com/airamrguez">@airamrguez</a> in <a href="https://github.com/facebook/react/pull/12702">#12702</a>)</li>
<li>Fix context providers to not bail out on children if there’s a legacy context provider above. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/12586">#12586</a>)</li>
<li>Add the ability to specify <code class="gatsby-code-text">propTypes</code> on a context provider component. (<a href="https://github.com/nicolevy">@nicolevy</a> in <a href="https://github.com/facebook/react/pull/12658">#12658</a>)</li>
<li>Fix a false positive warning when using <code class="gatsby-code-text">react-lifecycles-compat</code> in <code class="gatsby-code-text">&lt;StrictMode&gt;</code>. (<a href="https://github.com/bvaughn">@bvaughn</a> in <a href="https://github.com/facebook/react/pull/12644">#12644</a>)</li>
<li>Warn when the <code class="gatsby-code-text">forwardRef()</code> render function has <code class="gatsby-code-text">propTypes</code> or <code class="gatsby-code-text">defaultProps</code>. (<a href="https://github.com/bvaughn">@bvaughn</a> in <a href="https://github.com/facebook/react/pull/12644">#12644</a>)</li>
<li>Improve how <code class="gatsby-code-text">forwardRef()</code> and context consumers are displayed in the component stack. (<a href="https://github.com/sophiebits">@sophiebits</a> in <a href="https://github.com/facebook/react/pull/12777">#12777</a>)</li>
<li>Change internal event names. This can break third-party packages that rely on React internals in unsupported ways. (<a href="https://github.com/philipp-spiess">@philipp-spiess</a> in <a href="https://github.com/facebook/react/pull/12629">#12629</a>)</li>
</ul>
<h3 id="react-test-renderer"><a href="#react-test-renderer" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React Test Renderer</h3>
<ul>
<li>Fix the <code class="gatsby-code-text">getDerivedStateFromProps()</code> support to match the new React DOM behavior. (<a href="https://github.com/koba04">@koba04</a> in <a href="https://github.com/facebook/react/pull/12676">#12676</a>)</li>
<li>Fix a <code class="gatsby-code-text">testInstance.parent</code> crash when the parent is a fragment or another special node. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/12813">#12813</a>)</li>
<li><code class="gatsby-code-text">forwardRef()</code> components are now discoverable by the test renderer traversal methods. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/12725">#12725</a>)</li>
<li>Shallow renderer now ignores <code class="gatsby-code-text">setState()</code> updaters that return <code class="gatsby-code-text">null</code> or <code class="gatsby-code-text">undefined</code>. (<a href="https://github.com/koba04">@koba04</a> in <a href="https://github.com/facebook/react/pull/12756">#12756</a>)</li>
</ul>
<h3 id="react-art"><a href="#react-art" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React ART</h3>
<ul>
<li>Fix reading context provided from the tree managed by React DOM. (<a href="https://github.com/acdlite">@acdlite</a> in <a href="https://github.com/facebook/react/pull/12779">#12779</a>)</li>
</ul>
<h3 id="react-call-return-experimental"><a href="#react-call-return-experimental" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React Call Return (Experimental)</h3>
<ul>
<li>This experiment was deleted because it was affecting the bundle size and the API wasn’t good enough. It’s likely to come back in the future in some other form. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/12820">#12820</a>)</li>
</ul>
<h3 id="react-reconciler-experimental"><a href="#react-reconciler-experimental" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React Reconciler (Experimental)</h3>
<ul>
<li>The <a href="https://github.com/facebook/react/blob/c601f7a64640290af85c9f0e33c78480656b46bc/packages/react-noop-renderer/src/createReactNoop.js#L82-L285">new host config shape</a> is flat and doesn’t use nested objects. (<a href="https://github.com/gaearon">@gaearon</a> in <a href="https://github.com/facebook/react/pull/12792">#12792</a>)</li>
</ul>]]></description><link>https://doc.react-china.org/blog/2018/05/23/react-v-16-4.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/05/23/react-v-16-4.html</guid><pubDate>Wed, 23 May 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[React v16.3.0: New lifecycles and context API]]></title><description><![CDATA[<p>A few days ago, we <a href="/blog/2018/03/27/update-on-async-rendering.html">wrote a post about upcoming changes to our legacy lifecycle methods</a>, including gradual migration strategies. In React 16.3.0, we are adding a few new lifecycle methods to assist with that migration. We are also introducing new APIs for long requested features: an official context API, a ref forwarding API, and an ergonomic ref API.</p>
<p>Read on to learn more about the release.</p>
<h2 id="official-context-api"><a href="#official-context-api" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Official Context API</h2>
<p>For many years, React has offered an experimental API for context. Although it was a powerful tool, its use was discouraged because of inherent problems in the API, and because we always intended to replace the experimental API with a better one.</p>
<p>Version 16.3 introduces a new context API that is more efficient and supports both static type checking and deep updates.</p>
<blockquote>
<p><strong>Note</strong></p>
<p>The old context API will keep working for all React 16.x releases, so you will have time to migrate.</p>
</blockquote>
<p>Here is an example illustrating how you might inject a “theme” using the new context API:
<div class="gatsby-highlight">
        <pre class="gatsby-code-jsx"><code><span class="gatsby-highlight-code-line"><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">'light'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span>
<span class="token keyword">class</span> <span class="token class-name">ThemeProvider</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>theme<span class="token punctuation">:</span> <span class="token string">'light'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
<span class="gatsby-highlight-code-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
</span><span class="gatsby-highlight-code-line">        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>
</span><span class="gatsby-highlight-code-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Provider</span><span class="token punctuation">></span></span>
</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ThemedButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
<span class="gatsby-highlight-code-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>
</span><span class="gatsby-highlight-code-line">        <span class="token punctuation">{</span>theme <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span>
</span><span class="gatsby-highlight-code-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>
</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
        </div></p>
<p><a href="/docs/context.html">Learn more about the new context API here.</a></p>
<h2 id="createref-api"><a href="#createref-api" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="gatsby-code-text">createRef</code> API</h2>
<p>Previously, React provided two ways of managing refs: the legacy string ref API and the callback API. Although the string ref API was the more convenient of the two, it had <a href="https://github.com/facebook/react/issues/1373">several downsides</a> and so our official recommendation was to use the callback form instead.</p>
<p>Version 16.3 adds a new option for managing refs that offers the convenience of a string ref without any of the downsides:
<div class="gatsby-highlight">
        <pre class="gatsby-code-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="gatsby-highlight-code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span>  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
</span>  <span class="token punctuation">}</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span>  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
        </div></p>
<blockquote>
<p><strong>Note:</strong></p>
<p>Callback refs will continue to be supported in addition to the new <code class="gatsby-code-text">createRef</code> API.</p>
<p>You don’t need to replace callback refs in your components. They are slightly more flexible, so they will remain as an advanced feature.</p>
</blockquote>
<p><a href="/docs/refs-and-the-dom.html">Learn more about the new <code class="gatsby-code-text">createRef</code> API here.</a></p>
<h2 id="forwardref-api"><a href="#forwardref-api" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="gatsby-code-text">forwardRef</code> API</h2>
<p><a href="/docs/higher-order-components.html">Higher-order components</a> (or HOCs) are a common way to reuse code between components. Building on the theme context example from above, we might create an HOC that injects the current “theme” as a prop:</p>
<p><div class="gatsby-highlight">
        <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">withTheme</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">ThemedComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
<span class="gatsby-highlight-code-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>
</span><span class="gatsby-highlight-code-line">        <span class="token punctuation">{</span>theme <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span>
</span><span class="gatsby-highlight-code-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>
</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
        </div></p>
<p>We can use the above HOC to wire components up to the theme context without having to use <code class="gatsby-code-text">ThemeContext</code> directly. For example:</p>
<p><div class="gatsby-highlight">
        <pre class="gatsby-code-jsx"><code><span class="token keyword">class</span> <span class="token class-name">FancyButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  buttonRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="gatsby-highlight-code-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span>label<span class="token punctuation">,</span> theme<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
        <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">rest</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>theme<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-button`</span></span><span class="token punctuation">}</span></span>
<span class="gatsby-highlight-code-line">        <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>buttonRef<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
</span>        <span class="token punctuation">{</span>label<span class="token punctuation">}</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="gatsby-highlight-code-line"><span class="token keyword">const</span> FancyThemedButton <span class="token operator">=</span> <span class="token function">withTheme</span><span class="token punctuation">(</span>FancyButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span>
<span class="token comment">// We can render FancyThemedButton as if it were a FancyButton</span>
<span class="token comment">// It will automatically receive the current "theme",</span>
<span class="token comment">// And the HOC will pass through our other props.</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyThemedButton</span>
  <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Click me!<span class="token punctuation">"</span></span>
  <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span>
<span class="token punctuation">/></span></span><span class="token punctuation">;</span>
</code></pre>
        </div></p>
<p>HOCs typically <a href="/docs/higher-order-components.html#convention-pass-unrelated-props-through-to-the-wrapped-component">pass props through</a> to the components they wrap. Unfortunately, <a href="/docs/higher-order-components.html#refs-arent-passed-through">refs are not passed through</a>. This means that we can’t attach a ref to <code class="gatsby-code-text">FancyButton</code> if we use <code class="gatsby-code-text">FancyThemedButton</code>— so there’s no way for us to call <code class="gatsby-code-text">focus()</code>.</p>
<p>The new <code class="gatsby-code-text">forwardRef</code> API solves this problem by providing a way for us to intercept a <code class="gatsby-code-text">ref</code> and forward it as a normal prop:
<div class="gatsby-highlight">
        <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">withTheme</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Note the second param "ref" provided by React.forwardRef.</span>
  <span class="token comment">// We can attach this to Component directly.</span>
<span class="gatsby-highlight-code-line">  <span class="token keyword">function</span> <span class="token function">ThemedComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>
        <span class="token punctuation">{</span>theme <span class="token operator">=></span> <span class="token punctuation">(</span>
<span class="gatsby-highlight-code-line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
</span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// These next lines are not necessary,</span>
  <span class="token comment">// But they do give the component a better display name in DevTools,</span>
  <span class="token comment">// e.g. "ForwardRef(withTheme(MyComponent))"</span>
<span class="gatsby-highlight-code-line">  <span class="token keyword">const</span> name <span class="token operator">=</span> Component<span class="token punctuation">.</span>displayName <span class="token operator">||</span> Component<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</span><span class="gatsby-highlight-code-line">  ThemedComponent<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`withTheme(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>
</span>
  <span class="token comment">// Tell React to pass the "ref" to ThemedComponent.</span>
<span class="gatsby-highlight-code-line">  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span>ThemedComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token punctuation">}</span>

<span class="gatsby-highlight-code-line"><span class="token keyword">const</span> fancyButtonRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span>
<span class="token comment">// fancyButtonRef will now point to FancyButton</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyThemedButton</span>
  <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Click me!<span class="token punctuation">"</span></span>
  <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span>
<span class="gatsby-highlight-code-line">  <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>fancyButtonRef<span class="token punctuation">}</span></span>
</span><span class="token punctuation">/></span></span><span class="token punctuation">;</span>
</code></pre>
        </div></p>
<h2 id="component-lifecycle-changes"><a href="#component-lifecycle-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Component Lifecycle Changes</h2>
<p>React’s class component API has been around for years with little change. However, as we add support for more advanced features (such as <a href="/docs/react-component.html#componentdidcatch">error boundaries</a> and the upcoming <a href="/blog/2018/03/01/sneak-peek-beyond-react-16.html">async rendering mode</a>) we stretch this model in ways that it was not originally intended.</p>
<p>For example, with the current API, it is too easy to block the initial render with non-essential logic. In part this is because there are too many ways to accomplish a given task, and it can be unclear which is best. We’ve observed that the interrupting behavior of error handling is often not taken into consideration and can result in memory leaks (something that will also impact the upcoming async rendering mode). The current class component API also complicates other efforts, like our work on <a href="https://twitter.com/trueadm/status/944908776896978946">prototyping a React compiler</a>.</p>
<p>Many of these issues are exacerbated by a subset of the component lifecycles (<code class="gatsby-code-text">componentWillMount</code>, <code class="gatsby-code-text">componentWillReceiveProps</code>, and <code class="gatsby-code-text">componentWillUpdate</code>). These also happen to be the lifecycles that cause the most confusion within the React community. For these reasons, we are going to deprecate those methods in favor of better alternatives.</p>
<p>We recognize that this change will impact many existing components. Because of this, the migration path will be as gradual as possible, and will provide escape hatches. (At Facebook, we maintain more than 50,000 React components. We depend on a gradual release cycle too!)</p>
<blockquote>
<p><strong>Note:</strong></p>
<p>Deprecation warnings will be enabled with a future 16.x release, <strong>but the legacy lifecycles will continue to work until version 17</strong>.</p>
<p>Even in version 17, it will still be possible to use them, but they will be aliased with an “UNSAFE_” prefix to indicate that they might cause issues. We have also prepared an <a href="https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles">automated script to rename them</a> in existing code.</p>
</blockquote>
<p>In addition to deprecating unsafe lifecycles, we are also adding a couple of new lifecyles:</p>
<ul>
<li><a href="/docs/react-component.html#static-getderivedstatefromprops"><code class="gatsby-code-text">getDerivedStateFromProps</code></a> is being added as a safer alternative to the legacy <code class="gatsby-code-text">componentWillReceiveProps</code>.</li>
<li><a href="/docs/react-component.html#getsnapshotbeforeupdate"><code class="gatsby-code-text">getSnapshotBeforeUpdate</code></a> is being added to support safely reading properties from e.g. the DOM before updates are made.</li>
</ul>
<p><a href="/blog/2018/03/27/update-on-async-rendering.html">Learn more about these lifecycle changes here.</a></p>
<h2 id="strictmode-component"><a href="#strictmode-component" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="gatsby-code-text">StrictMode</code> Component</h2>
<p><code class="gatsby-code-text">StrictMode</code> is a tool for highlighting potential problems in an application. Like <code class="gatsby-code-text">Fragment</code>, <code class="gatsby-code-text">StrictMode</code> does not render any visible UI. It activates additional checks and warnings for its descendants.</p>
<blockquote>
<p><strong>Note:</strong></p>
<p><code class="gatsby-code-text">StrictMode</code> checks are run in development mode only; <em>they do not impact the production build</em>.</p>
</blockquote>
<p>Although it is not possible for strict mode to catch all problems (e.g. certain types of mutation), it can help with many. If you see warnings in strict mode, those things will likely cause bugs for async rendering.</p>
<p>In version 16.3, <code class="gatsby-code-text">StrictMode</code> helps with:</p>
<ul>
<li>Identifying components with unsafe lifecycles</li>
<li>Warning about legacy string ref API usage</li>
<li>Detecting unexpected side effects</li>
</ul>
<p>Additional functionality will be added with future releases of React.</p>
<p><a href="/docs/strict-mode.html">Learn more about the <code class="gatsby-code-text">StrictMode</code> component here.</a></p>]]></description><link>https://doc.react-china.org/blog/2018/03/29/react-v-16-3.html</link><guid isPermaLink="false">https://doc.react-china.org/blog/2018/03/29/react-v-16-3.html</guid><pubDate>Thu, 29 Mar 2018 00:00:00 GMT</pubDate></item></channel></rss>